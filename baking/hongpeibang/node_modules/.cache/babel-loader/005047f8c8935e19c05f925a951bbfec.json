{"ast":null,"code":"module.exports = function (THREE) {\n  /**\n   * @author tapio / http://tapio.github.com/\n   *\n   * Brightness and contrast adjustment\n   * https://github.com/evanw/glfx.js\n   * brightness: -1 to 1 (-1 is solid black, 0 is no change, and 1 is solid white)\n   * contrast: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\n   */\n  THREE.BrightnessContrastShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"brightness\": {\n        type: \"f\",\n        value: 0\n      },\n      \"contrast\": {\n        type: \"f\",\n        value: 0\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float brightness;\", \"uniform float contrast;\", \"varying vec2 vUv;\", \"void main() {\", \"gl_FragColor = texture2D( tDiffuse, vUv );\", \"gl_FragColor.rgb += brightness;\", \"if (contrast > 0.0) {\", \"gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;\", \"} else {\", \"gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;\", \"}\", \"}\"].join(\"\\n\")\n  };\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/BrightnessContrastShader.js"],"names":["module","exports","THREE","BrightnessContrastShader","uniforms","type","value","vertexShader","join","fragmentShader"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AACjC;;;;;;;;AASAA,EAAAA,KAAK,CAACC,wBAAN,GAAiC;AAEhCC,IAAAA,QAAQ,EAAE;AAET,kBAAc;AAAEC,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAFL;AAGT,oBAAc;AAAED,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAHL;AAIT,kBAAc;AAAED,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB;AAJL,KAFsB;AAUhCC,IAAAA,YAAY,EAAE,CAEb,mBAFa,EAIb,eAJa,EAMZ,WANY,EAQZ,2EARY,EAUb,GAVa,EAYZC,IAZY,CAYN,IAZM,CAVkB;AAwBhCC,IAAAA,cAAc,EAAE,CAEf,6BAFe,EAGf,2BAHe,EAIf,yBAJe,EAMf,mBANe,EAQf,eARe,EAUd,4CAVc,EAYd,iCAZc,EAcd,uBAdc,EAeb,uEAfa,EAgBd,UAhBc,EAiBb,uEAjBa,EAkBd,GAlBc,EAoBf,GApBe,EAsBdD,IAtBc,CAsBR,IAtBQ;AAxBgB,GAAjC;AAkDA,CA5DD","sourcesContent":["module.exports = function( THREE ){\n\t/**\n\t * @author tapio / http://tapio.github.com/\n\t *\n\t * Brightness and contrast adjustment\n\t * https://github.com/evanw/glfx.js\n\t * brightness: -1 to 1 (-1 is solid black, 0 is no change, and 1 is solid white)\n\t * contrast: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\n\t */\n\n\tTHREE.BrightnessContrastShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\":   { type: \"t\", value: null },\n\t\t\t\"brightness\": { type: \"f\", value: 0 },\n\t\t\t\"contrast\":   { type: \"f\", value: 0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform float brightness;\",\n\t\t\t\"uniform float contrast;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"gl_FragColor = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\t\"gl_FragColor.rgb += brightness;\",\n\n\t\t\t\t\"if (contrast > 0.0) {\",\n\t\t\t\t\t\"gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;\",\n\t\t\t\t\"} else {\",\n\t\t\t\t\t\"gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;\",\n\t\t\t\t\"}\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n"]},"metadata":{},"sourceType":"script"}