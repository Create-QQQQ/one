{"ast":null,"code":"module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n  THREE.SavePass = function (renderTarget) {\n    if (THREE.CopyShader === undefined) console.error(\"THREE.SavePass relies on THREE.CopyShader\");\n    var shader = THREE.CopyShader;\n    this.textureID = \"tDiffuse\";\n    this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n    this.material = new THREE.ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.renderTarget = renderTarget;\n\n    if (this.renderTarget === undefined) {\n      this.renderTargetParameters = {\n        minFilter: THREE.LinearFilter,\n        magFilter: THREE.LinearFilter,\n        format: THREE.RGBFormat,\n        stencilBuffer: false\n      };\n      this.renderTarget = new THREE.WebGLRenderTarget(window.innerWidth, window.innerHeight, this.renderTargetParameters);\n    }\n\n    this.enabled = true;\n    this.needsSwap = false;\n    this.clear = false;\n    this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene = new THREE.Scene();\n    this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n    this.scene.add(this.quad);\n  };\n\n  THREE.SavePass.prototype = {\n    render: function (renderer, writeBuffer, readBuffer, delta) {\n      if (this.uniforms[this.textureID]) {\n        this.uniforms[this.textureID].value = readBuffer;\n      }\n\n      this.quad.material = this.material;\n      renderer.render(this.scene, this.camera, this.renderTarget, this.clear);\n    }\n  };\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/SavePass.js"],"names":["module","exports","THREE","SavePass","renderTarget","CopyShader","undefined","console","error","shader","textureID","uniforms","UniformsUtils","clone","material","ShaderMaterial","vertexShader","fragmentShader","renderTargetParameters","minFilter","LinearFilter","magFilter","format","RGBFormat","stencilBuffer","WebGLRenderTarget","window","innerWidth","innerHeight","enabled","needsSwap","clear","camera","OrthographicCamera","scene","Scene","quad","Mesh","PlaneBufferGeometry","add","prototype","render","renderer","writeBuffer","readBuffer","delta","value"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AAEjC;;;AAIAA,EAAAA,KAAK,CAACC,QAAN,GAAiB,UAAWC,YAAX,EAA0B;AAE1C,QAAKF,KAAK,CAACG,UAAN,KAAqBC,SAA1B,EACCC,OAAO,CAACC,KAAR,CAAe,2CAAf;AAED,QAAIC,MAAM,GAAGP,KAAK,CAACG,UAAnB;AAEA,SAAKK,SAAL,GAAiB,UAAjB;AAEA,SAAKC,QAAL,GAAgBT,KAAK,CAACU,aAAN,CAAoBC,KAApB,CAA2BJ,MAAM,CAACE,QAAlC,CAAhB;AAEA,SAAKG,QAAL,GAAgB,IAAIZ,KAAK,CAACa,cAAV,CAA0B;AAEzCJ,MAAAA,QAAQ,EAAE,KAAKA,QAF0B;AAGzCK,MAAAA,YAAY,EAAEP,MAAM,CAACO,YAHoB;AAIzCC,MAAAA,cAAc,EAAER,MAAM,CAACQ;AAJkB,KAA1B,CAAhB;AAQA,SAAKb,YAAL,GAAoBA,YAApB;;AAEA,QAAK,KAAKA,YAAL,KAAsBE,SAA3B,EAAuC;AAEtC,WAAKY,sBAAL,GAA8B;AAAEC,QAAAA,SAAS,EAAEjB,KAAK,CAACkB,YAAnB;AAAiCC,QAAAA,SAAS,EAAEnB,KAAK,CAACkB,YAAlD;AAAgEE,QAAAA,MAAM,EAAEpB,KAAK,CAACqB,SAA9E;AAAyFC,QAAAA,aAAa,EAAE;AAAxG,OAA9B;AACA,WAAKpB,YAAL,GAAoB,IAAIF,KAAK,CAACuB,iBAAV,CAA6BC,MAAM,CAACC,UAApC,EAAgDD,MAAM,CAACE,WAAvD,EAAoE,KAAKV,sBAAzE,CAApB;AAEA;;AAED,SAAKW,OAAL,GAAe,IAAf;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,KAAL,GAAa,KAAb;AAGA,SAAKC,MAAL,GAAc,IAAI9B,KAAK,CAAC+B,kBAAV,CAA8B,CAAE,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAE,CAA3C,EAA8C,CAA9C,EAAiD,CAAjD,CAAd;AACA,SAAKC,KAAL,GAAc,IAAIhC,KAAK,CAACiC,KAAV,EAAd;AAEA,SAAKC,IAAL,GAAY,IAAIlC,KAAK,CAACmC,IAAV,CAAgB,IAAInC,KAAK,CAACoC,mBAAV,CAA+B,CAA/B,EAAkC,CAAlC,CAAhB,EAAuD,IAAvD,CAAZ;AACA,SAAKJ,KAAL,CAAWK,GAAX,CAAgB,KAAKH,IAArB;AAEA,GAvCD;;AAyCAlC,EAAAA,KAAK,CAACC,QAAN,CAAeqC,SAAf,GAA2B;AAE1BC,IAAAA,MAAM,EAAE,UAAWC,QAAX,EAAqBC,WAArB,EAAkCC,UAAlC,EAA8CC,KAA9C,EAAsD;AAE7D,UAAK,KAAKlC,QAAL,CAAe,KAAKD,SAApB,CAAL,EAAuC;AAEtC,aAAKC,QAAL,CAAe,KAAKD,SAApB,EAAgCoC,KAAhC,GAAwCF,UAAxC;AAEA;;AAED,WAAKR,IAAL,CAAUtB,QAAV,GAAqB,KAAKA,QAA1B;AAEA4B,MAAAA,QAAQ,CAACD,MAAT,CAAiB,KAAKP,KAAtB,EAA6B,KAAKF,MAAlC,EAA0C,KAAK5B,YAA/C,EAA6D,KAAK2B,KAAlE;AAEA;AAdyB,GAA3B;AAkBA,CAjED","sourcesContent":["module.exports = function( THREE ){\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.SavePass = function ( renderTarget ) {\n\n\t\tif ( THREE.CopyShader === undefined )\n\t\t\tconsole.error( \"THREE.SavePass relies on THREE.CopyShader\" );\n\n\t\tvar shader = THREE.CopyShader;\n\n\t\tthis.textureID = \"tDiffuse\";\n\n\t\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t\tthis.renderTarget = renderTarget;\n\n\t\tif ( this.renderTarget === undefined ) {\n\n\t\t\tthis.renderTargetParameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat, stencilBuffer: false };\n\t\t\tthis.renderTarget = new THREE.WebGLRenderTarget( window.innerWidth, window.innerHeight, this.renderTargetParameters );\n\n\t\t}\n\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = false;\n\t\tthis.clear = false;\n\n\n\t\tthis.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tthis.scene  = new THREE.Scene();\n\n\t\tthis.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );\n\t\tthis.scene.add( this.quad );\n\n\t};\n\n\tTHREE.SavePass.prototype = {\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, delta ) {\n\n\t\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\t\tthis.uniforms[ this.textureID ].value = readBuffer;\n\n\t\t\t}\n\n\t\t\tthis.quad.material = this.material;\n\n\t\t\trenderer.render( this.scene, this.camera, this.renderTarget, this.clear );\n\n\t\t}\n\n\t};\n\n};\n"]},"metadata":{},"sourceType":"script"}