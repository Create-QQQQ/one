{"ast":null,"code":"module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Blend two textures\n   */\n  THREE.BlendShader = {\n    uniforms: {\n      \"tDiffuse1\": {\n        type: \"t\",\n        value: null\n      },\n      \"tDiffuse2\": {\n        type: \"t\",\n        value: null\n      },\n      \"mixRatio\": {\n        type: \"f\",\n        value: 0.5\n      },\n      \"opacity\": {\n        type: \"f\",\n        value: 1.0\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform float opacity;\", \"uniform float mixRatio;\", \"uniform sampler2D tDiffuse1;\", \"uniform sampler2D tDiffuse2;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 texel1 = texture2D( tDiffuse1, vUv );\", \"vec4 texel2 = texture2D( tDiffuse2, vUv );\", \"gl_FragColor = opacity * mix( texel1, texel2, mixRatio );\", \"}\"].join(\"\\n\")\n  };\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/BlendShader.js"],"names":["module","exports","THREE","BlendShader","uniforms","type","value","vertexShader","join","fragmentShader"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AACjC;;;;;AAMAA,EAAAA,KAAK,CAACC,WAAN,GAAoB;AAEnBC,IAAAA,QAAQ,EAAE;AAET,mBAAa;AAAEC,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAFJ;AAGT,mBAAa;AAAED,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAHJ;AAIT,kBAAa;AAAED,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAJJ;AAKT,iBAAa;AAAED,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB;AALJ,KAFS;AAWnBC,IAAAA,YAAY,EAAE,CAEb,mBAFa,EAIb,eAJa,EAMZ,WANY,EAOZ,2EAPY,EASb,GATa,EAWZC,IAXY,CAWN,IAXM,CAXK;AAwBnBC,IAAAA,cAAc,EAAE,CAEf,wBAFe,EAGf,yBAHe,EAKf,8BALe,EAMf,8BANe,EAQf,mBARe,EAUf,eAVe,EAYd,4CAZc,EAad,4CAbc,EAcd,2DAdc,EAgBf,GAhBe,EAkBdD,IAlBc,CAkBR,IAlBQ;AAxBG,GAApB;AA8CA,CArDD","sourcesContent":["module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Blend two textures\n\t */\n\n\tTHREE.BlendShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse1\": { type: \"t\", value: null },\n\t\t\t\"tDiffuse2\": { type: \"t\", value: null },\n\t\t\t\"mixRatio\":  { type: \"f\", value: 0.5 },\n\t\t\t\"opacity\":   { type: \"f\", value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float opacity;\",\n\t\t\t\"uniform float mixRatio;\",\n\n\t\t\t\"uniform sampler2D tDiffuse1;\",\n\t\t\t\"uniform sampler2D tDiffuse2;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 texel1 = texture2D( tDiffuse1, vUv );\",\n\t\t\t\t\"vec4 texel2 = texture2D( tDiffuse2, vUv );\",\n\t\t\t\t\"gl_FragColor = opacity * mix( texel1, texel2, mixRatio );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}"]},"metadata":{},"sourceType":"script"}