{"ast":null,"code":"module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Bleach bypass shader [http://en.wikipedia.org/wiki/Bleach_bypass]\n   * - based on Nvidia example\n   * http://developer.download.nvidia.com/shaderlibrary/webpages/shader_library.html#post_bleach_bypass\n   */\n  THREE.BleachBypassShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"opacity\": {\n        type: \"f\",\n        value: 1.0\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform float opacity;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 base = texture2D( tDiffuse, vUv );\", \"vec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\", \"float lum = dot( lumCoeff, base.rgb );\", \"vec3 blend = vec3( lum );\", \"float L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\", \"vec3 result1 = 2.0 * base.rgb * blend;\", \"vec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\", \"vec3 newColor = mix( result1, result2, L );\", \"float A2 = opacity * base.a;\", \"vec3 mixRGB = A2 * newColor.rgb;\", \"mixRGB += ( ( 1.0 - A2 ) * base.rgb );\", \"gl_FragColor = vec4( mixRGB, base.a );\", \"}\"].join(\"\\n\")\n  };\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/BleachBypassShader.js"],"names":["module","exports","THREE","BleachBypassShader","uniforms","type","value","vertexShader","join","fragmentShader"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AACjC;;;;;;;AAQAA,EAAAA,KAAK,CAACC,kBAAN,GAA2B;AAE1BC,IAAAA,QAAQ,EAAE;AAET,kBAAY;AAAEC,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAFH;AAGT,iBAAY;AAAED,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB;AAHH,KAFgB;AAS1BC,IAAAA,YAAY,EAAE,CAEb,mBAFa,EAIb,eAJa,EAMZ,WANY,EAOZ,2EAPY,EASb,GATa,EAWZC,IAXY,CAWN,IAXM,CATY;AAsB1BC,IAAAA,cAAc,EAAE,CAEf,wBAFe,EAIf,6BAJe,EAMf,mBANe,EAQf,eARe,EAUd,yCAVc,EAYd,0CAZc,EAad,wCAbc,EAcd,2BAdc,EAgBd,0DAhBc,EAkBd,wCAlBc,EAmBd,kEAnBc,EAqBd,6CArBc,EAuBd,8BAvBc,EAwBd,kCAxBc,EAyBd,wCAzBc,EA2Bd,wCA3Bc,EA6Bf,GA7Be,EA+BdD,IA/Bc,CA+BR,IA/BQ;AAtBU,GAA3B;AAyDA,CAlED","sourcesContent":["module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Bleach bypass shader [http://en.wikipedia.org/wiki/Bleach_bypass]\n\t * - based on Nvidia example\n\t * http://developer.download.nvidia.com/shaderlibrary/webpages/shader_library.html#post_bleach_bypass\n\t */\n\n\tTHREE.BleachBypassShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"opacity\":  { type: \"f\", value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float opacity;\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 base = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\t\"vec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\",\n\t\t\t\t\"float lum = dot( lumCoeff, base.rgb );\",\n\t\t\t\t\"vec3 blend = vec3( lum );\",\n\n\t\t\t\t\"float L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\",\n\n\t\t\t\t\"vec3 result1 = 2.0 * base.rgb * blend;\",\n\t\t\t\t\"vec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\",\n\n\t\t\t\t\"vec3 newColor = mix( result1, result2, L );\",\n\n\t\t\t\t\"float A2 = opacity * base.a;\",\n\t\t\t\t\"vec3 mixRGB = A2 * newColor.rgb;\",\n\t\t\t\t\"mixRGB += ( ( 1.0 - A2 ) * base.rgb );\",\n\n\t\t\t\t\"gl_FragColor = vec4( mixRGB, base.a );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n"]},"metadata":{},"sourceType":"script"}