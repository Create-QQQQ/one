{"ast":null,"code":"module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n  THREE.ShaderPass = function (shader, textureID) {\n    this.textureID = textureID !== undefined ? textureID : \"tDiffuse\";\n    this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n    this.material = new THREE.ShaderMaterial({\n      defines: shader.defines || {},\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.renderToScreen = false;\n    this.enabled = true;\n    this.needsSwap = true;\n    this.clear = false;\n    this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene = new THREE.Scene();\n    this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n    this.scene.add(this.quad);\n  };\n\n  THREE.ShaderPass.prototype = {\n    render: function (renderer, writeBuffer, readBuffer, delta) {\n      if (this.uniforms[this.textureID]) {\n        this.uniforms[this.textureID].value = readBuffer;\n      }\n\n      this.quad.material = this.material;\n\n      if (this.renderToScreen) {\n        renderer.render(this.scene, this.camera);\n      } else {\n        renderer.render(this.scene, this.camera, writeBuffer, this.clear);\n      }\n    }\n  };\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/ShaderPass.js"],"names":["module","exports","THREE","ShaderPass","shader","textureID","undefined","uniforms","UniformsUtils","clone","material","ShaderMaterial","defines","vertexShader","fragmentShader","renderToScreen","enabled","needsSwap","clear","camera","OrthographicCamera","scene","Scene","quad","Mesh","PlaneBufferGeometry","add","prototype","render","renderer","writeBuffer","readBuffer","delta","value"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AAEjC;;;AAIAA,EAAAA,KAAK,CAACC,UAAN,GAAmB,UAAWC,MAAX,EAAmBC,SAAnB,EAA+B;AAEjD,SAAKA,SAAL,GAAmBA,SAAS,KAAKC,SAAhB,GAA8BD,SAA9B,GAA0C,UAA3D;AAEA,SAAKE,QAAL,GAAgBL,KAAK,CAACM,aAAN,CAAoBC,KAApB,CAA2BL,MAAM,CAACG,QAAlC,CAAhB;AAEA,SAAKG,QAAL,GAAgB,IAAIR,KAAK,CAACS,cAAV,CAA0B;AAEzCC,MAAAA,OAAO,EAAER,MAAM,CAACQ,OAAP,IAAkB,EAFc;AAGzCL,MAAAA,QAAQ,EAAE,KAAKA,QAH0B;AAIzCM,MAAAA,YAAY,EAAET,MAAM,CAACS,YAJoB;AAKzCC,MAAAA,cAAc,EAAEV,MAAM,CAACU;AALkB,KAA1B,CAAhB;AASA,SAAKC,cAAL,GAAsB,KAAtB;AAEA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,KAAL,GAAa,KAAb;AAGA,SAAKC,MAAL,GAAc,IAAIjB,KAAK,CAACkB,kBAAV,CAA8B,CAAE,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAE,CAA3C,EAA8C,CAA9C,EAAiD,CAAjD,CAAd;AACA,SAAKC,KAAL,GAAc,IAAInB,KAAK,CAACoB,KAAV,EAAd;AAEA,SAAKC,IAAL,GAAY,IAAIrB,KAAK,CAACsB,IAAV,CAAgB,IAAItB,KAAK,CAACuB,mBAAV,CAA+B,CAA/B,EAAkC,CAAlC,CAAhB,EAAuD,IAAvD,CAAZ;AACA,SAAKJ,KAAL,CAAWK,GAAX,CAAgB,KAAKH,IAArB;AAEA,GA5BD;;AA8BArB,EAAAA,KAAK,CAACC,UAAN,CAAiBwB,SAAjB,GAA6B;AAE5BC,IAAAA,MAAM,EAAE,UAAWC,QAAX,EAAqBC,WAArB,EAAkCC,UAAlC,EAA8CC,KAA9C,EAAsD;AAE7D,UAAK,KAAKzB,QAAL,CAAe,KAAKF,SAApB,CAAL,EAAuC;AAEtC,aAAKE,QAAL,CAAe,KAAKF,SAApB,EAAgC4B,KAAhC,GAAwCF,UAAxC;AAEA;;AAED,WAAKR,IAAL,CAAUb,QAAV,GAAqB,KAAKA,QAA1B;;AAEA,UAAK,KAAKK,cAAV,EAA2B;AAE1Bc,QAAAA,QAAQ,CAACD,MAAT,CAAiB,KAAKP,KAAtB,EAA6B,KAAKF,MAAlC;AAEA,OAJD,MAIO;AAENU,QAAAA,QAAQ,CAACD,MAAT,CAAiB,KAAKP,KAAtB,EAA6B,KAAKF,MAAlC,EAA0CW,WAA1C,EAAuD,KAAKZ,KAA5D;AAEA;AAED;AAtB2B,GAA7B;AA0BA,CA9DD","sourcesContent":["module.exports = function( THREE ){\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.ShaderPass = function ( shader, textureID ) {\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\n\n\t\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new THREE.ShaderMaterial( {\n\n\t\t\tdefines: shader.defines || {},\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t\tthis.renderToScreen = false;\n\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = true;\n\t\tthis.clear = false;\n\n\n\t\tthis.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tthis.scene  = new THREE.Scene();\n\n\t\tthis.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );\n\t\tthis.scene.add( this.quad );\n\n\t};\n\n\tTHREE.ShaderPass.prototype = {\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, delta ) {\n\n\t\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\t\tthis.uniforms[ this.textureID ].value = readBuffer;\n\n\t\t\t}\n\n\t\t\tthis.quad.material = this.material;\n\n\t\t\tif ( this.renderToScreen ) {\n\n\t\t\t\trenderer.render( this.scene, this.camera );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( this.scene, this.camera, writeBuffer, this.clear );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n};\n"]},"metadata":{},"sourceType":"script"}