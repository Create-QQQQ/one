{"ast":null,"code":"module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n  THREE.BloomPass = function (strength, kernelSize, sigma, resolution) {\n    strength = strength !== undefined ? strength : 1;\n    kernelSize = kernelSize !== undefined ? kernelSize : 25;\n    sigma = sigma !== undefined ? sigma : 4.0;\n    resolution = resolution !== undefined ? resolution : 256; // render targets\n\n    var pars = {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      format: THREE.RGBFormat\n    };\n    this.renderTargetX = new THREE.WebGLRenderTarget(resolution, resolution, pars);\n    this.renderTargetY = new THREE.WebGLRenderTarget(resolution, resolution, pars); // copy material\n\n    if (THREE.CopyShader === undefined) console.error(\"THREE.BloomPass relies on THREE.CopyShader\");\n    var copyShader = THREE.CopyShader;\n    this.copyUniforms = THREE.UniformsUtils.clone(copyShader.uniforms);\n    this.copyUniforms[\"opacity\"].value = strength;\n    this.materialCopy = new THREE.ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: THREE.AdditiveBlending,\n      transparent: true\n    }); // convolution material\n\n    if (THREE.ConvolutionShader === undefined) console.error(\"THREE.BloomPass relies on THREE.ConvolutionShader\");\n    var convolutionShader = THREE.ConvolutionShader;\n    this.convolutionUniforms = THREE.UniformsUtils.clone(convolutionShader.uniforms);\n    this.convolutionUniforms[\"uImageIncrement\"].value = THREE.BloomPass.blurX;\n    this.convolutionUniforms[\"cKernel\"].value = THREE.ConvolutionShader.buildKernel(sigma);\n    this.materialConvolution = new THREE.ShaderMaterial({\n      uniforms: this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        \"KERNEL_SIZE_FLOAT\": kernelSize.toFixed(1),\n        \"KERNEL_SIZE_INT\": kernelSize.toFixed(0)\n      }\n    });\n    this.enabled = true;\n    this.needsSwap = false;\n    this.clear = false;\n    this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene = new THREE.Scene();\n    this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n    this.scene.add(this.quad);\n  };\n\n  THREE.BloomPass.prototype = {\n    render: function (renderer, writeBuffer, readBuffer, delta, maskActive) {\n      if (maskActive) renderer.context.disable(renderer.context.STENCIL_TEST); // Render quad with blured scene into texture (convolution pass 1)\n\n      this.quad.material = this.materialConvolution;\n      this.convolutionUniforms[\"tDiffuse\"].value = readBuffer;\n      this.convolutionUniforms[\"uImageIncrement\"].value = THREE.BloomPass.blurX;\n      renderer.render(this.scene, this.camera, this.renderTargetX, true); // Render quad with blured scene into texture (convolution pass 2)\n\n      this.convolutionUniforms[\"tDiffuse\"].value = this.renderTargetX;\n      this.convolutionUniforms[\"uImageIncrement\"].value = THREE.BloomPass.blurY;\n      renderer.render(this.scene, this.camera, this.renderTargetY, true); // Render original scene with superimposed blur to texture\n\n      this.quad.material = this.materialCopy;\n      this.copyUniforms[\"tDiffuse\"].value = this.renderTargetY;\n      if (maskActive) renderer.context.enable(renderer.context.STENCIL_TEST);\n      renderer.render(this.scene, this.camera, readBuffer, this.clear);\n    }\n  };\n  THREE.BloomPass.blurX = new THREE.Vector2(0.001953125, 0.0);\n  THREE.BloomPass.blurY = new THREE.Vector2(0.0, 0.001953125);\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/BloomPass.js"],"names":["module","exports","THREE","BloomPass","strength","kernelSize","sigma","resolution","undefined","pars","minFilter","LinearFilter","magFilter","format","RGBFormat","renderTargetX","WebGLRenderTarget","renderTargetY","CopyShader","console","error","copyShader","copyUniforms","UniformsUtils","clone","uniforms","value","materialCopy","ShaderMaterial","vertexShader","fragmentShader","blending","AdditiveBlending","transparent","ConvolutionShader","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","defines","toFixed","enabled","needsSwap","clear","camera","OrthographicCamera","scene","Scene","quad","Mesh","PlaneBufferGeometry","add","prototype","render","renderer","writeBuffer","readBuffer","delta","maskActive","context","disable","STENCIL_TEST","material","blurY","enable","Vector2"],"mappings":"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","sourcesContent":["module.exports = function( THREE ){\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.BloomPass = function ( strength, kernelSize, sigma, resolution ) {\n\n\t\tstrength = ( strength !== undefined ) ? strength : 1;\n\t\tkernelSize = ( kernelSize !== undefined ) ? kernelSize : 25;\n\t\tsigma = ( sigma !== undefined ) ? sigma : 4.0;\n\t\tresolution = ( resolution !== undefined ) ? resolution : 256;\n\n\t\t// render targets\n\n\t\tvar pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat };\n\n\t\tthis.renderTargetX = new THREE.WebGLRenderTarget( resolution, resolution, pars );\n\t\tthis.renderTargetY = new THREE.WebGLRenderTarget( resolution, resolution, pars );\n\n\t\t// copy material\n\n\t\tif ( THREE.CopyShader === undefined )\n\t\t\tconsole.error( \"THREE.BloomPass relies on THREE.CopyShader\" );\n\n\t\tvar copyShader = THREE.CopyShader;\n\n\t\tthis.copyUniforms = THREE.UniformsUtils.clone( copyShader.uniforms );\n\n\t\tthis.copyUniforms[ \"opacity\" ].value = strength;\n\n\t\tthis.materialCopy = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: this.copyUniforms,\n\t\t\tvertexShader: copyShader.vertexShader,\n\t\t\tfragmentShader: copyShader.fragmentShader,\n\t\t\tblending: THREE.AdditiveBlending,\n\t\t\ttransparent: true\n\n\t\t} );\n\n\t\t// convolution material\n\n\t\tif ( THREE.ConvolutionShader === undefined )\n\t\t\tconsole.error( \"THREE.BloomPass relies on THREE.ConvolutionShader\" );\n\n\t\tvar convolutionShader = THREE.ConvolutionShader;\n\n\t\tthis.convolutionUniforms = THREE.UniformsUtils.clone( convolutionShader.uniforms );\n\n\t\tthis.convolutionUniforms[ \"uImageIncrement\" ].value = THREE.BloomPass.blurX;\n\t\tthis.convolutionUniforms[ \"cKernel\" ].value = THREE.ConvolutionShader.buildKernel( sigma );\n\n\t\tthis.materialConvolution = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: this.convolutionUniforms,\n\t\t\tvertexShader:  convolutionShader.vertexShader,\n\t\t\tfragmentShader: convolutionShader.fragmentShader,\n\t\t\tdefines: {\n\t\t\t\t\"KERNEL_SIZE_FLOAT\": kernelSize.toFixed( 1 ),\n\t\t\t\t\"KERNEL_SIZE_INT\": kernelSize.toFixed( 0 )\n\t\t\t}\n\n\t\t} );\n\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = false;\n\t\tthis.clear = false;\n\n\n\t\tthis.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tthis.scene  = new THREE.Scene();\n\n\t\tthis.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );\n\t\tthis.scene.add( this.quad );\n\n\t};\n\n\tTHREE.BloomPass.prototype = {\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {\n\n\t\t\tif ( maskActive ) renderer.context.disable( renderer.context.STENCIL_TEST );\n\n\t\t\t// Render quad with blured scene into texture (convolution pass 1)\n\n\t\t\tthis.quad.material = this.materialConvolution;\n\n\t\t\tthis.convolutionUniforms[ \"tDiffuse\" ].value = readBuffer;\n\t\t\tthis.convolutionUniforms[ \"uImageIncrement\" ].value = THREE.BloomPass.blurX;\n\n\t\t\trenderer.render( this.scene, this.camera, this.renderTargetX, true );\n\n\n\t\t\t// Render quad with blured scene into texture (convolution pass 2)\n\n\t\t\tthis.convolutionUniforms[ \"tDiffuse\" ].value = this.renderTargetX;\n\t\t\tthis.convolutionUniforms[ \"uImageIncrement\" ].value = THREE.BloomPass.blurY;\n\n\t\t\trenderer.render( this.scene, this.camera, this.renderTargetY, true );\n\n\t\t\t// Render original scene with superimposed blur to texture\n\n\t\t\tthis.quad.material = this.materialCopy;\n\n\t\t\tthis.copyUniforms[ \"tDiffuse\" ].value = this.renderTargetY;\n\n\t\t\tif ( maskActive ) renderer.context.enable( renderer.context.STENCIL_TEST );\n\n\t\t\trenderer.render( this.scene, this.camera, readBuffer, this.clear );\n\n\t\t}\n\n\t};\n\n\tTHREE.BloomPass.blurX = new THREE.Vector2( 0.001953125, 0.0 );\n\tTHREE.BloomPass.blurY = new THREE.Vector2( 0.0, 0.001953125 );\n\n};\n"]},"metadata":{},"sourceType":"script"}