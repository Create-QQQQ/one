{"ast":null,"code":"module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n  THREE.EffectComposer = function (renderer, renderTarget) {\n    this.renderer = renderer;\n\n    if (renderTarget === undefined) {\n      var pixelRatio = renderer.getPixelRatio();\n      var width = Math.floor(renderer.context.canvas.width / pixelRatio) || 1;\n      var height = Math.floor(renderer.context.canvas.height / pixelRatio) || 1;\n      var parameters = {\n        minFilter: THREE.LinearFilter,\n        magFilter: THREE.LinearFilter,\n        format: THREE.RGBFormat,\n        stencilBuffer: false\n      };\n      renderTarget = new THREE.WebGLRenderTarget(width, height, parameters);\n    }\n\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.passes = [];\n    if (THREE.CopyShader === undefined) console.error(\"THREE.EffectComposer relies on THREE.CopyShader\");\n    this.copyPass = new THREE.ShaderPass(THREE.CopyShader);\n  };\n\n  THREE.EffectComposer.prototype = {\n    swapBuffers: function () {\n      var tmp = this.readBuffer;\n      this.readBuffer = this.writeBuffer;\n      this.writeBuffer = tmp;\n    },\n    addPass: function (pass) {\n      this.passes.push(pass);\n    },\n    insertPass: function (pass, index) {\n      this.passes.splice(index, 0, pass);\n    },\n    render: function (delta) {\n      this.writeBuffer = this.renderTarget1;\n      this.readBuffer = this.renderTarget2;\n      var maskActive = false;\n      var pass,\n          i,\n          il = this.passes.length;\n\n      for (i = 0; i < il; i++) {\n        pass = this.passes[i];\n        if (!pass.enabled) continue;\n        pass.render(this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive);\n\n        if (pass.needsSwap) {\n          if (maskActive) {\n            var context = this.renderer.context;\n            context.stencilFunc(context.NOTEQUAL, 1, 0xffffffff);\n            this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, delta);\n            context.stencilFunc(context.EQUAL, 1, 0xffffffff);\n          }\n\n          this.swapBuffers();\n        }\n\n        if (pass instanceof THREE.MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof THREE.ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    },\n    reset: function (renderTarget) {\n      if (renderTarget === undefined) {\n        renderTarget = this.renderTarget1.clone();\n        var pixelRatio = this.renderer.getPixelRatio();\n        renderTarget.width = Math.floor(this.renderer.context.canvas.width / pixelRatio);\n        renderTarget.height = Math.floor(this.renderer.context.canvas.height / pixelRatio);\n      }\n\n      this.renderTarget1.dispose();\n      this.renderTarget1 = renderTarget;\n      this.renderTarget2.dispose();\n      this.renderTarget2 = renderTarget.clone();\n      this.writeBuffer = this.renderTarget1;\n      this.readBuffer = this.renderTarget2;\n    },\n    setSize: function (width, height) {\n      this.renderTarget1.setSize(width, height);\n      this.renderTarget2.setSize(width, height);\n    }\n  };\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/EffectComposer.js"],"names":["module","exports","THREE","EffectComposer","renderer","renderTarget","undefined","pixelRatio","getPixelRatio","width","Math","floor","context","canvas","height","parameters","minFilter","LinearFilter","magFilter","format","RGBFormat","stencilBuffer","WebGLRenderTarget","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","passes","CopyShader","console","error","copyPass","ShaderPass","prototype","swapBuffers","tmp","addPass","pass","push","insertPass","index","splice","render","delta","maskActive","i","il","length","enabled","needsSwap","stencilFunc","NOTEQUAL","EQUAL","MaskPass","ClearMaskPass","reset","dispose","setSize"],"mappings":"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","sourcesContent":["module.exports = function( THREE ){\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.EffectComposer = function ( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tvar pixelRatio = renderer.getPixelRatio();\n\n\t\t\tvar width  = Math.floor( renderer.context.canvas.width  / pixelRatio ) || 1;\n\t\t\tvar height = Math.floor( renderer.context.canvas.height / pixelRatio ) || 1;\n\t\t\tvar parameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat, stencilBuffer: false };\n\n\t\t\trenderTarget = new THREE.WebGLRenderTarget( width, height, parameters );\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.passes = [];\n\n\t\tif ( THREE.CopyShader === undefined )\n\t\t\tconsole.error( \"THREE.EffectComposer relies on THREE.CopyShader\" );\n\n\t\tthis.copyPass = new THREE.ShaderPass( THREE.CopyShader );\n\n\t};\n\n\tTHREE.EffectComposer.prototype = {\n\n\t\tswapBuffers: function() {\n\n\t\t\tvar tmp = this.readBuffer;\n\t\t\tthis.readBuffer = this.writeBuffer;\n\t\t\tthis.writeBuffer = tmp;\n\n\t\t},\n\n\t\taddPass: function ( pass ) {\n\n\t\t\tthis.passes.push( pass );\n\n\t\t},\n\n\t\tinsertPass: function ( pass, index ) {\n\n\t\t\tthis.passes.splice( index, 0, pass );\n\n\t\t},\n\n\t\trender: function ( delta ) {\n\n\t\t\tthis.writeBuffer = this.renderTarget1;\n\t\t\tthis.readBuffer = this.renderTarget2;\n\n\t\t\tvar maskActive = false;\n\n\t\t\tvar pass, i, il = this.passes.length;\n\n\t\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\t\tpass = this.passes[ i ];\n\n\t\t\t\tif ( ! pass.enabled ) continue;\n\n\t\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive );\n\n\t\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\t\tvar context = this.renderer.context;\n\n\t\t\t\t\t\tcontext.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, delta );\n\n\t\t\t\t\t\tcontext.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.swapBuffers();\n\n\t\t\t\t}\n\n\t\t\t\tif ( pass instanceof THREE.MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof THREE.ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\treset: function ( renderTarget ) {\n\n\t\t\tif ( renderTarget === undefined ) {\n\n\t\t\t\trenderTarget = this.renderTarget1.clone();\n\n\t\t\t\tvar pixelRatio = this.renderer.getPixelRatio();\n\n\t\t\t\trenderTarget.width  = Math.floor( this.renderer.context.canvas.width  / pixelRatio );\n\t\t\t\trenderTarget.height = Math.floor( this.renderer.context.canvas.height / pixelRatio );\n\n\t\t\t}\n\n\t\t\tthis.renderTarget1.dispose();\n\t\t\tthis.renderTarget1 = renderTarget;\n\t\t\tthis.renderTarget2.dispose();\n\t\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\t\tthis.writeBuffer = this.renderTarget1;\n\t\t\tthis.readBuffer = this.renderTarget2;\n\n\t\t},\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tthis.renderTarget1.setSize( width, height );\n\t\t\tthis.renderTarget2.setSize( width, height );\n\n\t\t}\n\n\t};\n\n};\n"]},"metadata":{},"sourceType":"script"}