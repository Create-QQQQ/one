{"ast":null,"code":"module.exports = function (THREE) {\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   *\n   * Triangle blur shader\n   * based on glfx.js triangle blur shader\n   * https://github.com/evanw/glfx.js\n   *\n   * A basic blur filter, which convolves the image with a\n   * pyramid filter. The pyramid filter is separable and is applied as two\n   * perpendicular triangle filters.\n   */\n  THREE.TriangleBlurShader = {\n    uniforms: {\n      \"texture\": {\n        type: \"t\",\n        value: null\n      },\n      \"delta\": {\n        type: \"v2\",\n        value: new THREE.Vector2(1, 1)\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"#define ITERATIONS 10.0\", \"uniform sampler2D texture;\", \"uniform vec2 delta;\", \"varying vec2 vUv;\", \"float random( vec3 scale, float seed ) {\", // use the fragment position for a different seed per-pixel\n    \"return fract( sin( dot( gl_FragCoord.xyz + seed, scale ) ) * 43758.5453 + seed );\", \"}\", \"void main() {\", \"vec4 color = vec4( 0.0 );\", \"float total = 0.0;\", // randomize the lookup values to hide the fixed number of samples\n    \"float offset = random( vec3( 12.9898, 78.233, 151.7182 ), 0.0 );\", \"for ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {\", \"float percent = ( t + offset - 0.5 ) / ITERATIONS;\", \"float weight = 1.0 - abs( percent );\", \"color += texture2D( texture, vUv + delta * percent ) * weight;\", \"total += weight;\", \"}\", \"gl_FragColor = color / total;\", \"}\"].join(\"\\n\")\n  };\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/TriangleBlurShader.js"],"names":["module","exports","THREE","TriangleBlurShader","uniforms","type","value","Vector2","vertexShader","join","fragmentShader"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AACjC;;;;;;;;;;;AAYAA,EAAAA,KAAK,CAACC,kBAAN,GAA2B;AAE1BC,IAAAA,QAAQ,EAAG;AAEV,iBAAW;AAAEC,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAFD;AAGV,eAAW;AAAED,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,KAAK,EAAE,IAAIJ,KAAK,CAACK,OAAV,CAAmB,CAAnB,EAAsB,CAAtB;AAArB;AAHD,KAFe;AAS1BC,IAAAA,YAAY,EAAE,CAEb,mBAFa,EAIb,eAJa,EAMZ,WANY,EAOZ,2EAPY,EASb,GATa,EAWZC,IAXY,CAWN,IAXM,CATY;AAsB1BC,IAAAA,cAAc,EAAE,CAEf,yBAFe,EAIf,4BAJe,EAKf,qBALe,EAOf,mBAPe,EASf,0CATe,EAWd;AAEA,uFAbc,EAef,GAfe,EAiBf,eAjBe,EAmBd,2BAnBc,EAqBd,oBArBc,EAuBd;AAEA,sEAzBc,EA2Bd,wDA3Bc,EA6Bb,oDA7Ba,EA8Bb,sCA9Ba,EAgCb,gEAhCa,EAiCb,kBAjCa,EAmCd,GAnCc,EAqCd,+BArCc,EAuCf,GAvCe,EAyCdD,IAzCc,CAyCR,IAzCQ;AAtBU,GAA3B;AAmEA,CAhFD","sourcesContent":["module.exports = function( THREE ){\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Triangle blur shader\n\t * based on glfx.js triangle blur shader\n\t * https://github.com/evanw/glfx.js\n\t *\n\t * A basic blur filter, which convolves the image with a\n\t * pyramid filter. The pyramid filter is separable and is applied as two\n\t * perpendicular triangle filters.\n\t */\n\n\tTHREE.TriangleBlurShader = {\n\n\t\tuniforms : {\n\n\t\t\t\"texture\": { type: \"t\", value: null },\n\t\t\t\"delta\":   { type: \"v2\", value: new THREE.Vector2( 1, 1 ) }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"#define ITERATIONS 10.0\",\n\n\t\t\t\"uniform sampler2D texture;\",\n\t\t\t\"uniform vec2 delta;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"float random( vec3 scale, float seed ) {\",\n\n\t\t\t\t// use the fragment position for a different seed per-pixel\n\n\t\t\t\t\"return fract( sin( dot( gl_FragCoord.xyz + seed, scale ) ) * 43758.5453 + seed );\",\n\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 color = vec4( 0.0 );\",\n\n\t\t\t\t\"float total = 0.0;\",\n\n\t\t\t\t// randomize the lookup values to hide the fixed number of samples\n\n\t\t\t\t\"float offset = random( vec3( 12.9898, 78.233, 151.7182 ), 0.0 );\",\n\n\t\t\t\t\"for ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {\",\n\n\t\t\t\t\t\"float percent = ( t + offset - 0.5 ) / ITERATIONS;\",\n\t\t\t\t\t\"float weight = 1.0 - abs( percent );\",\n\n\t\t\t\t\t\"color += texture2D( texture, vUv + delta * percent ) * weight;\",\n\t\t\t\t\t\"total += weight;\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"gl_FragColor = color / total;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n"]},"metadata":{},"sourceType":"script"}