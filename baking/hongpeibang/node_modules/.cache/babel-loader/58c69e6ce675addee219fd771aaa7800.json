{"ast":null,"code":"module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Focus shader\n   * based on PaintEffect postprocess from ro.me\n   * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js\n   */\n  THREE.FocusShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"screenWidth\": {\n        type: \"f\",\n        value: 1024\n      },\n      \"screenHeight\": {\n        type: \"f\",\n        value: 1024\n      },\n      \"sampleDistance\": {\n        type: \"f\",\n        value: 0.94\n      },\n      \"waveFactor\": {\n        type: \"f\",\n        value: 0.00125\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform float screenWidth;\", \"uniform float screenHeight;\", \"uniform float sampleDistance;\", \"uniform float waveFactor;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 color, org, tmp, add;\", \"float sample_dist, f;\", \"vec2 vin;\", \"vec2 uv = vUv;\", \"add = color = org = texture2D( tDiffuse, uv );\", \"vin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );\", \"sample_dist = dot( vin, vin ) * 2.0;\", \"f = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;\", \"vec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );\", \"add += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );\", \"if( tmp.b < color.b ) color = tmp;\", \"add += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );\", \"if( tmp.b < color.b ) color = tmp;\", \"add += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );\", \"if( tmp.b < color.b ) color = tmp;\", \"add += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );\", \"if( tmp.b < color.b ) color = tmp;\", \"add += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );\", \"if( tmp.b < color.b ) color = tmp;\", \"add += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );\", \"if( tmp.b < color.b ) color = tmp;\", \"add += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );\", \"if( tmp.b < color.b ) color = tmp;\", \"color = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );\", \"color = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );\", \"gl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );\", \"}\"].join(\"\\n\")\n  };\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/FocusShader.js"],"names":["module","exports","THREE","FocusShader","uniforms","type","value","vertexShader","join","fragmentShader"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AACjC;;;;;;;AAQAA,EAAAA,KAAK,CAACC,WAAN,GAAoB;AAEnBC,IAAAA,QAAQ,EAAG;AAEV,kBAAkB;AAAEC,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAFR;AAGV,qBAAkB;AAAED,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAHR;AAIV,sBAAkB;AAAED,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAJR;AAKV,wBAAkB;AAAED,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB,OALR;AAMV,oBAAkB;AAAED,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB;AANR,KAFQ;AAYnBC,IAAAA,YAAY,EAAE,CAEb,mBAFa,EAIb,eAJa,EAMZ,WANY,EAOZ,2EAPY,EASb,GATa,EAWZC,IAXY,CAWN,IAXM,CAZK;AAyBnBC,IAAAA,cAAc,EAAE,CAEf,4BAFe,EAGf,6BAHe,EAIf,+BAJe,EAKf,2BALe,EAOf,6BAPe,EASf,mBATe,EAWf,eAXe,EAad,4BAbc,EAcd,uBAdc,EAed,WAfc,EAgBd,gBAhBc,EAkBd,gDAlBc,EAoBd,2CApBc,EAqBd,sCArBc,EAuBd,kEAvBc,EAyBd,+EAzBc,EA2Bd,mFA3Bc,EA4Bd,oCA5Bc,EA8Bd,mFA9Bc,EA+Bd,oCA/Bc,EAiCd,oFAjCc,EAkCd,oCAlCc,EAoCd,oFApCc,EAqCd,oCArCc,EAuCd,qFAvCc,EAwCd,oCAxCc,EA0Cd,qFA1Cc,EA2Cd,oCA3Cc,EA6Cd,oFA7Cc,EA8Cd,oCA9Cc,EAgDd,sDAhDc,EAiDd,8FAjDc,EAmDd,+EAnDc,EAqDf,GArDe,EAwDdD,IAxDc,CAwDR,IAxDQ;AAzBG,GAApB;AAoFA,CA7FD","sourcesContent":["module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Focus shader\n\t * based on PaintEffect postprocess from ro.me\n\t * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js\n\t */\n\n\tTHREE.FocusShader = {\n\n\t\tuniforms : {\n\n\t\t\t\"tDiffuse\":       { type: \"t\", value: null },\n\t\t\t\"screenWidth\":    { type: \"f\", value: 1024 },\n\t\t\t\"screenHeight\":   { type: \"f\", value: 1024 },\n\t\t\t\"sampleDistance\": { type: \"f\", value: 0.94 },\n\t\t\t\"waveFactor\":     { type: \"f\", value: 0.00125 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float screenWidth;\",\n\t\t\t\"uniform float screenHeight;\",\n\t\t\t\"uniform float sampleDistance;\",\n\t\t\t\"uniform float waveFactor;\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 color, org, tmp, add;\",\n\t\t\t\t\"float sample_dist, f;\",\n\t\t\t\t\"vec2 vin;\",\n\t\t\t\t\"vec2 uv = vUv;\",\n\n\t\t\t\t\"add = color = org = texture2D( tDiffuse, uv );\",\n\n\t\t\t\t\"vin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );\",\n\t\t\t\t\"sample_dist = dot( vin, vin ) * 2.0;\",\n\n\t\t\t\t\"f = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;\",\n\n\t\t\t\t\"vec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );\",\n\n\t\t\t\t\"add += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );\",\n\t\t\t\t\"if( tmp.b < color.b ) color = tmp;\",\n\n\t\t\t\t\"add += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );\",\n\t\t\t\t\"if( tmp.b < color.b ) color = tmp;\",\n\n\t\t\t\t\"add += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );\",\n\t\t\t\t\"if( tmp.b < color.b ) color = tmp;\",\n\n\t\t\t\t\"add += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );\",\n\t\t\t\t\"if( tmp.b < color.b ) color = tmp;\",\n\n\t\t\t\t\"add += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );\",\n\t\t\t\t\"if( tmp.b < color.b ) color = tmp;\",\n\n\t\t\t\t\"add += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );\",\n\t\t\t\t\"if( tmp.b < color.b ) color = tmp;\",\n\n\t\t\t\t\"add += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );\",\n\t\t\t\t\"if( tmp.b < color.b ) color = tmp;\",\n\n\t\t\t\t\"color = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );\",\n\t\t\t\t\"color = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );\",\n\n\t\t\t\t\"gl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );\",\n\n\t\t\t\"}\"\n\n\n\t\t].join( \"\\n\" )\n\t};\n\n}\n"]},"metadata":{},"sourceType":"script"}