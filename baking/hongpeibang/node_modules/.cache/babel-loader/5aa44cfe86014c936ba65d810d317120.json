{"ast":null,"code":"module.exports = function (THREE) {\n  /**\n   * @author WestLangley / http://github.com/WestLangley\n   *\n   * Gamma Correction Shader\n   * http://en.wikipedia.org/wiki/gamma_correction\n   */\n  THREE.GammaCorrectionShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"#define GAMMA_OUTPUT\", \"#define GAMMA_FACTOR 2\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", THREE.ShaderChunk[\"common\"], \"void main() {\", \"vec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );\", \"gl_FragColor = vec4( linearToOutput( tex.rgb ), tex.a );\", \"}\"].join(\"\\n\")\n  };\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/GammaCorrectionShader.js"],"names":["module","exports","THREE","GammaCorrectionShader","uniforms","type","value","vertexShader","join","fragmentShader","ShaderChunk"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AACjC;;;;;;AAOAA,EAAAA,KAAK,CAACC,qBAAN,GAA8B;AAE7BC,IAAAA,QAAQ,EAAE;AAET,kBAAY;AAAEC,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB;AAFH,KAFmB;AAQ7BC,IAAAA,YAAY,EAAE,CAEb,mBAFa,EAIb,eAJa,EAMZ,WANY,EAOZ,2EAPY,EASb,GATa,EAWZC,IAXY,CAWN,IAXM,CARe;AAqB7BC,IAAAA,cAAc,EAAE,CAEf,sBAFe,EAGf,wBAHe,EAKf,6BALe,EAOf,mBAPe,EASfP,KAAK,CAACQ,WAAN,CAAmB,QAAnB,CATe,EAWf,eAXe,EAad,yDAbc,EAed,0DAfc,EAiBf,GAjBe,EAmBdF,IAnBc,CAmBR,IAnBQ;AArBa,GAA9B;AA4CA,CApDD","sourcesContent":["module.exports = function( THREE ){\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Gamma Correction Shader\n\t * http://en.wikipedia.org/wiki/gamma_correction\n\t */\n\n\tTHREE.GammaCorrectionShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"#define GAMMA_OUTPUT\",\n\t\t\t\"#define GAMMA_FACTOR 2\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );\",\n\n\t\t\t\t\"gl_FragColor = vec4( linearToOutput( tex.rgb ), tex.a );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n"]},"metadata":{},"sourceType":"script"}