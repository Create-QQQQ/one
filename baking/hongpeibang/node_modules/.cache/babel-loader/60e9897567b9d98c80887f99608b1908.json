{"ast":null,"code":"module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n  THREE.MaskPass = function (scene, camera) {\n    this.scene = scene;\n    this.camera = camera;\n    this.enabled = true;\n    this.clear = true;\n    this.needsSwap = false;\n    this.inverse = false;\n  };\n\n  THREE.MaskPass.prototype = {\n    render: function (renderer, writeBuffer, readBuffer, delta) {\n      var context = renderer.context; // don't update color or depth\n\n      context.colorMask(false, false, false, false);\n      context.depthMask(false); // set up stencil\n\n      var writeValue, clearValue;\n\n      if (this.inverse) {\n        writeValue = 0;\n        clearValue = 1;\n      } else {\n        writeValue = 1;\n        clearValue = 0;\n      }\n\n      context.enable(context.STENCIL_TEST);\n      context.stencilOp(context.REPLACE, context.REPLACE, context.REPLACE);\n      context.stencilFunc(context.ALWAYS, writeValue, 0xffffffff);\n      context.clearStencil(clearValue); // draw into the stencil buffer\n\n      renderer.render(this.scene, this.camera, readBuffer, this.clear);\n      renderer.render(this.scene, this.camera, writeBuffer, this.clear); // re-enable update of color and depth\n\n      context.colorMask(true, true, true, true);\n      context.depthMask(true); // only render where stencil is set to 1\n\n      context.stencilFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n\n      context.stencilOp(context.KEEP, context.KEEP, context.KEEP);\n    }\n  };\n\n  THREE.ClearMaskPass = function () {\n    this.enabled = true;\n  };\n\n  THREE.ClearMaskPass.prototype = {\n    render: function (renderer, writeBuffer, readBuffer, delta) {\n      var context = renderer.context;\n      context.disable(context.STENCIL_TEST);\n    }\n  };\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/MaskPass.js"],"names":["module","exports","THREE","MaskPass","scene","camera","enabled","clear","needsSwap","inverse","prototype","render","renderer","writeBuffer","readBuffer","delta","context","colorMask","depthMask","writeValue","clearValue","enable","STENCIL_TEST","stencilOp","REPLACE","stencilFunc","ALWAYS","clearStencil","EQUAL","KEEP","ClearMaskPass","disable"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AAEjC;;;AAIAA,EAAAA,KAAK,CAACC,QAAN,GAAiB,UAAWC,KAAX,EAAkBC,MAAlB,EAA2B;AAE3C,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AAEA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,SAAL,GAAiB,KAAjB;AAEA,SAAKC,OAAL,GAAe,KAAf;AAEA,GAXD;;AAaAP,EAAAA,KAAK,CAACC,QAAN,CAAeO,SAAf,GAA2B;AAE1BC,IAAAA,MAAM,EAAE,UAAWC,QAAX,EAAqBC,WAArB,EAAkCC,UAAlC,EAA8CC,KAA9C,EAAsD;AAE7D,UAAIC,OAAO,GAAGJ,QAAQ,CAACI,OAAvB,CAF6D,CAI7D;;AAEAA,MAAAA,OAAO,CAACC,SAAR,CAAmB,KAAnB,EAA0B,KAA1B,EAAiC,KAAjC,EAAwC,KAAxC;AACAD,MAAAA,OAAO,CAACE,SAAR,CAAmB,KAAnB,EAP6D,CAS7D;;AAEA,UAAIC,UAAJ,EAAgBC,UAAhB;;AAEA,UAAK,KAAKX,OAAV,EAAoB;AAEnBU,QAAAA,UAAU,GAAG,CAAb;AACAC,QAAAA,UAAU,GAAG,CAAb;AAEA,OALD,MAKO;AAEND,QAAAA,UAAU,GAAG,CAAb;AACAC,QAAAA,UAAU,GAAG,CAAb;AAEA;;AAEDJ,MAAAA,OAAO,CAACK,MAAR,CAAgBL,OAAO,CAACM,YAAxB;AACAN,MAAAA,OAAO,CAACO,SAAR,CAAmBP,OAAO,CAACQ,OAA3B,EAAoCR,OAAO,CAACQ,OAA5C,EAAqDR,OAAO,CAACQ,OAA7D;AACAR,MAAAA,OAAO,CAACS,WAAR,CAAqBT,OAAO,CAACU,MAA7B,EAAqCP,UAArC,EAAiD,UAAjD;AACAH,MAAAA,OAAO,CAACW,YAAR,CAAsBP,UAAtB,EA5B6D,CA8B7D;;AAEAR,MAAAA,QAAQ,CAACD,MAAT,CAAiB,KAAKP,KAAtB,EAA6B,KAAKC,MAAlC,EAA0CS,UAA1C,EAAsD,KAAKP,KAA3D;AACAK,MAAAA,QAAQ,CAACD,MAAT,CAAiB,KAAKP,KAAtB,EAA6B,KAAKC,MAAlC,EAA0CQ,WAA1C,EAAuD,KAAKN,KAA5D,EAjC6D,CAmC7D;;AAEAS,MAAAA,OAAO,CAACC,SAAR,CAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC;AACAD,MAAAA,OAAO,CAACE,SAAR,CAAmB,IAAnB,EAtC6D,CAwC7D;;AAEAF,MAAAA,OAAO,CAACS,WAAR,CAAqBT,OAAO,CAACY,KAA7B,EAAoC,CAApC,EAAuC,UAAvC,EA1C6D,CA0CP;;AACtDZ,MAAAA,OAAO,CAACO,SAAR,CAAmBP,OAAO,CAACa,IAA3B,EAAiCb,OAAO,CAACa,IAAzC,EAA+Cb,OAAO,CAACa,IAAvD;AAEA;AA/CyB,GAA3B;;AAoDA3B,EAAAA,KAAK,CAAC4B,aAAN,GAAsB,YAAY;AAEjC,SAAKxB,OAAL,GAAe,IAAf;AAEA,GAJD;;AAMAJ,EAAAA,KAAK,CAAC4B,aAAN,CAAoBpB,SAApB,GAAgC;AAE/BC,IAAAA,MAAM,EAAE,UAAWC,QAAX,EAAqBC,WAArB,EAAkCC,UAAlC,EAA8CC,KAA9C,EAAsD;AAE7D,UAAIC,OAAO,GAAGJ,QAAQ,CAACI,OAAvB;AAEAA,MAAAA,OAAO,CAACe,OAAR,CAAiBf,OAAO,CAACM,YAAzB;AAEA;AAR8B,GAAhC;AAYA,CAzFD","sourcesContent":["module.exports = function( THREE ){\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.MaskPass = function ( scene, camera ) {\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.enabled = true;\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t};\n\n\tTHREE.MaskPass.prototype = {\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, delta ) {\n\n\t\t\tvar context = renderer.context;\n\n\t\t\t// don't update color or depth\n\n\t\t\tcontext.colorMask( false, false, false, false );\n\t\t\tcontext.depthMask( false );\n\n\t\t\t// set up stencil\n\n\t\t\tvar writeValue, clearValue;\n\n\t\t\tif ( this.inverse ) {\n\n\t\t\t\twriteValue = 0;\n\t\t\t\tclearValue = 1;\n\n\t\t\t} else {\n\n\t\t\t\twriteValue = 1;\n\t\t\t\tclearValue = 0;\n\n\t\t\t}\n\n\t\t\tcontext.enable( context.STENCIL_TEST );\n\t\t\tcontext.stencilOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\t\tcontext.stencilFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\t\tcontext.clearStencil( clearValue );\n\n\t\t\t// draw into the stencil buffer\n\n\t\t\trenderer.render( this.scene, this.camera, readBuffer, this.clear );\n\t\t\trenderer.render( this.scene, this.camera, writeBuffer, this.clear );\n\n\t\t\t// re-enable update of color and depth\n\n\t\t\tcontext.colorMask( true, true, true, true );\n\t\t\tcontext.depthMask( true );\n\n\t\t\t// only render where stencil is set to 1\n\n\t\t\tcontext.stencilFunc( context.EQUAL, 1, 0xffffffff );  // draw if == 1\n\t\t\tcontext.stencilOp( context.KEEP, context.KEEP, context.KEEP );\n\n\t\t}\n\n\t};\n\n\n\tTHREE.ClearMaskPass = function () {\n\n\t\tthis.enabled = true;\n\n\t};\n\n\tTHREE.ClearMaskPass.prototype = {\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, delta ) {\n\n\t\t\tvar context = renderer.context;\n\n\t\t\tcontext.disable( context.STENCIL_TEST );\n\n\t\t}\n\n\t};\n\n};\n"]},"metadata":{},"sourceType":"script"}