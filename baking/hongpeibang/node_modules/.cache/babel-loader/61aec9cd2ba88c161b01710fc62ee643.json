{"ast":null,"code":"module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Normal map shader\n   * - compute normals from heightmap\n   */\n  THREE.NormalMapShader = {\n    uniforms: {\n      \"heightMap\": {\n        type: \"t\",\n        value: null\n      },\n      \"resolution\": {\n        type: \"v2\",\n        value: new THREE.Vector2(512, 512)\n      },\n      \"scale\": {\n        type: \"v2\",\n        value: new THREE.Vector2(1, 1)\n      },\n      \"height\": {\n        type: \"f\",\n        value: 0.05\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform float height;\", \"uniform vec2 resolution;\", \"uniform sampler2D heightMap;\", \"varying vec2 vUv;\", \"void main() {\", \"float val = texture2D( heightMap, vUv ).x;\", \"float valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\", \"float valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\", \"gl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\", \"}\"].join(\"\\n\")\n  };\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/NormalMapShader.js"],"names":["module","exports","THREE","NormalMapShader","uniforms","type","value","Vector2","vertexShader","join","fragmentShader"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AACjC;;;;;;AAOAA,EAAAA,KAAK,CAACC,eAAN,GAAwB;AAEvBC,IAAAA,QAAQ,EAAE;AAET,mBAAc;AAAEC,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAFL;AAGT,oBAAc;AAAED,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,KAAK,EAAE,IAAIJ,KAAK,CAACK,OAAV,CAAmB,GAAnB,EAAwB,GAAxB;AAArB,OAHL;AAIT,eAAc;AAAEF,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,KAAK,EAAE,IAAIJ,KAAK,CAACK,OAAV,CAAmB,CAAnB,EAAsB,CAAtB;AAArB,OAJL;AAKT,gBAAc;AAAEF,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB;AALL,KAFa;AAWvBE,IAAAA,YAAY,EAAE,CAEb,mBAFa,EAIb,eAJa,EAMZ,WANY,EAOZ,2EAPY,EASb,GATa,EAWZC,IAXY,CAWN,IAXM,CAXS;AAwBvBC,IAAAA,cAAc,EAAE,CAEf,uBAFe,EAGf,0BAHe,EAIf,8BAJe,EAMf,mBANe,EAQf,eARe,EAUd,4CAVc,EAYd,+EAZc,EAad,+EAbc,EAed,mGAfc,EAiBf,GAjBe,EAmBdD,IAnBc,CAmBR,IAnBQ;AAxBO,GAAxB;AA+CA,CAvDD","sourcesContent":["module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Normal map shader\n\t * - compute normals from heightmap\n\t */\n\n\tTHREE.NormalMapShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"heightMap\":  { type: \"t\", value: null },\n\t\t\t\"resolution\": { type: \"v2\", value: new THREE.Vector2( 512, 512 ) },\n\t\t\t\"scale\":      { type: \"v2\", value: new THREE.Vector2( 1, 1 ) },\n\t\t\t\"height\":     { type: \"f\", value: 0.05 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float height;\",\n\t\t\t\"uniform vec2 resolution;\",\n\t\t\t\"uniform sampler2D heightMap;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"float val = texture2D( heightMap, vUv ).x;\",\n\n\t\t\t\t\"float valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\",\n\t\t\t\t\"float valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\",\n\n\t\t\t\t\"gl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n"]},"metadata":{},"sourceType":"script"}