{"ast":null,"code":"module.exports = function (THREE) {\n  /**\n   * Depth-of-field post-process with bokeh shader\n   */\n  THREE.BokehPass = function (scene, camera, params) {\n    this.scene = scene;\n    this.camera = camera;\n    var focus = params.focus !== undefined ? params.focus : 1.0;\n    var aspect = params.aspect !== undefined ? params.aspect : camera.aspect;\n    var aperture = params.aperture !== undefined ? params.aperture : 0.025;\n    var maxblur = params.maxblur !== undefined ? params.maxblur : 1.0; // render targets\n\n    var width = params.width || window.innerWidth || 1;\n    var height = params.height || window.innerHeight || 1;\n    this.renderTargetColor = new THREE.WebGLRenderTarget(width, height, {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      format: THREE.RGBFormat\n    });\n    this.renderTargetDepth = this.renderTargetColor.clone(); // depth material\n\n    this.materialDepth = new THREE.MeshDepthMaterial(); // bokeh material\n\n    if (THREE.BokehShader === undefined) {\n      console.error(\"THREE.BokehPass relies on THREE.BokehShader\");\n    }\n\n    var bokehShader = THREE.BokehShader;\n    var bokehUniforms = THREE.UniformsUtils.clone(bokehShader.uniforms);\n    bokehUniforms[\"tDepth\"].value = this.renderTargetDepth;\n    bokehUniforms[\"focus\"].value = focus;\n    bokehUniforms[\"aspect\"].value = aspect;\n    bokehUniforms[\"aperture\"].value = aperture;\n    bokehUniforms[\"maxblur\"].value = maxblur;\n    this.materialBokeh = new THREE.ShaderMaterial({\n      uniforms: bokehUniforms,\n      vertexShader: bokehShader.vertexShader,\n      fragmentShader: bokehShader.fragmentShader\n    });\n    this.uniforms = bokehUniforms;\n    this.enabled = true;\n    this.needsSwap = false;\n    this.renderToScreen = false;\n    this.clear = false;\n    this.camera2 = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene2 = new THREE.Scene();\n    this.quad2 = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n    this.scene2.add(this.quad2);\n  };\n\n  THREE.BokehPass.prototype = {\n    render: function (renderer, writeBuffer, readBuffer, delta, maskActive) {\n      this.quad2.material = this.materialBokeh; // Render depth into texture\n\n      this.scene.overrideMaterial = this.materialDepth;\n      renderer.render(this.scene, this.camera, this.renderTargetDepth, true); // Render bokeh composite\n\n      this.uniforms[\"tColor\"].value = readBuffer;\n\n      if (this.renderToScreen) {\n        renderer.render(this.scene2, this.camera2);\n      } else {\n        renderer.render(this.scene2, this.camera2, writeBuffer, this.clear);\n      }\n\n      this.scene.overrideMaterial = null;\n    }\n  };\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/BokehPass.js"],"names":["module","exports","THREE","BokehPass","scene","camera","params","focus","undefined","aspect","aperture","maxblur","width","window","innerWidth","height","innerHeight","renderTargetColor","WebGLRenderTarget","minFilter","LinearFilter","magFilter","format","RGBFormat","renderTargetDepth","clone","materialDepth","MeshDepthMaterial","BokehShader","console","error","bokehShader","bokehUniforms","UniformsUtils","uniforms","value","materialBokeh","ShaderMaterial","vertexShader","fragmentShader","enabled","needsSwap","renderToScreen","clear","camera2","OrthographicCamera","scene2","Scene","quad2","Mesh","PlaneBufferGeometry","add","prototype","render","renderer","writeBuffer","readBuffer","delta","maskActive","material","overrideMaterial"],"mappings":"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","sourcesContent":["module.exports = function( THREE ){\n\n\t/**\n\t * Depth-of-field post-process with bokeh shader\n\t */\n\n\n\tTHREE.BokehPass = function ( scene, camera, params ) {\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tvar focus = ( params.focus !== undefined ) ? params.focus : 1.0;\n\t\tvar aspect = ( params.aspect !== undefined ) ? params.aspect : camera.aspect;\n\t\tvar aperture = ( params.aperture !== undefined ) ? params.aperture : 0.025;\n\t\tvar maxblur = ( params.maxblur !== undefined ) ? params.maxblur : 1.0;\n\n\t\t// render targets\n\n\t\tvar width = params.width || window.innerWidth || 1;\n\t\tvar height = params.height || window.innerHeight || 1;\n\n\t\tthis.renderTargetColor = new THREE.WebGLRenderTarget( width, height, {\n\t\t\tminFilter: THREE.LinearFilter,\n\t\t\tmagFilter: THREE.LinearFilter,\n\t\t\tformat: THREE.RGBFormat\n\t\t} );\n\n\t\tthis.renderTargetDepth = this.renderTargetColor.clone();\n\n\t\t// depth material\n\n\t\tthis.materialDepth = new THREE.MeshDepthMaterial();\n\n\t\t// bokeh material\n\n\t\tif ( THREE.BokehShader === undefined ) {\n\n\t\t\tconsole.error( \"THREE.BokehPass relies on THREE.BokehShader\" );\n\n\t\t}\n\t\t\n\t\tvar bokehShader = THREE.BokehShader;\n\t\tvar bokehUniforms = THREE.UniformsUtils.clone( bokehShader.uniforms );\n\n\t\tbokehUniforms[ \"tDepth\" ].value = this.renderTargetDepth;\n\n\t\tbokehUniforms[ \"focus\" ].value = focus;\n\t\tbokehUniforms[ \"aspect\" ].value = aspect;\n\t\tbokehUniforms[ \"aperture\" ].value = aperture;\n\t\tbokehUniforms[ \"maxblur\" ].value = maxblur;\n\n\t\tthis.materialBokeh = new THREE.ShaderMaterial( {\n\t\t\tuniforms: bokehUniforms,\n\t\t\tvertexShader: bokehShader.vertexShader,\n\t\t\tfragmentShader: bokehShader.fragmentShader\n\t\t} );\n\n\t\tthis.uniforms = bokehUniforms;\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = false;\n\t\tthis.renderToScreen = false;\n\t\tthis.clear = false;\n\n\t\tthis.camera2 = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tthis.scene2  = new THREE.Scene();\n\n\t\tthis.quad2 = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );\n\t\tthis.scene2.add( this.quad2 );\n\n\t};\n\n\tTHREE.BokehPass.prototype = {\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {\n\n\t\t\tthis.quad2.material = this.materialBokeh;\n\n\t\t\t// Render depth into texture\n\n\t\t\tthis.scene.overrideMaterial = this.materialDepth;\n\n\t\t\trenderer.render( this.scene, this.camera, this.renderTargetDepth, true );\n\n\t\t\t// Render bokeh composite\n\n\t\t\tthis.uniforms[ \"tColor\" ].value = readBuffer;\n\n\t\t\tif ( this.renderToScreen ) {\n\n\t\t\t\trenderer.render( this.scene2, this.camera2 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( this.scene2, this.camera2, writeBuffer, this.clear );\n\n\t\t\t}\n\n\t\t\tthis.scene.overrideMaterial = null;\n\n\t\t}\n\n\t};\n\n};\n\n"]},"metadata":{},"sourceType":"script"}