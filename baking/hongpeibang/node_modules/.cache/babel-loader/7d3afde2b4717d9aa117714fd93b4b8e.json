{"ast":null,"code":"module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n  THREE.TexturePass = function (texture, opacity) {\n    if (THREE.CopyShader === undefined) console.error(\"THREE.TexturePass relies on THREE.CopyShader\");\n    var shader = THREE.CopyShader;\n    this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n    this.uniforms[\"opacity\"].value = opacity !== undefined ? opacity : 1.0;\n    this.uniforms[\"tDiffuse\"].value = texture;\n    this.material = new THREE.ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.enabled = true;\n    this.needsSwap = false;\n    this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene = new THREE.Scene();\n    this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n    this.scene.add(this.quad);\n  };\n\n  THREE.TexturePass.prototype = {\n    render: function (renderer, writeBuffer, readBuffer, delta) {\n      this.quad.material = this.material;\n      renderer.render(this.scene, this.camera, readBuffer);\n    }\n  };\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/TexturePass.js"],"names":["module","exports","THREE","TexturePass","texture","opacity","CopyShader","undefined","console","error","shader","uniforms","UniformsUtils","clone","value","material","ShaderMaterial","vertexShader","fragmentShader","enabled","needsSwap","camera","OrthographicCamera","scene","Scene","quad","Mesh","PlaneBufferGeometry","add","prototype","render","renderer","writeBuffer","readBuffer","delta"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AAEjC;;;AAIAA,EAAAA,KAAK,CAACC,WAAN,GAAoB,UAAWC,OAAX,EAAoBC,OAApB,EAA8B;AAEjD,QAAKH,KAAK,CAACI,UAAN,KAAqBC,SAA1B,EACCC,OAAO,CAACC,KAAR,CAAe,8CAAf;AAED,QAAIC,MAAM,GAAGR,KAAK,CAACI,UAAnB;AAEA,SAAKK,QAAL,GAAgBT,KAAK,CAACU,aAAN,CAAoBC,KAApB,CAA2BH,MAAM,CAACC,QAAlC,CAAhB;AAEA,SAAKA,QAAL,CAAe,SAAf,EAA2BG,KAA3B,GAAqCT,OAAO,KAAKE,SAAd,GAA4BF,OAA5B,GAAsC,GAAzE;AACA,SAAKM,QAAL,CAAe,UAAf,EAA4BG,KAA5B,GAAoCV,OAApC;AAEA,SAAKW,QAAL,GAAgB,IAAIb,KAAK,CAACc,cAAV,CAA0B;AAEzCL,MAAAA,QAAQ,EAAE,KAAKA,QAF0B;AAGzCM,MAAAA,YAAY,EAAEP,MAAM,CAACO,YAHoB;AAIzCC,MAAAA,cAAc,EAAER,MAAM,CAACQ;AAJkB,KAA1B,CAAhB;AAQA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,SAAL,GAAiB,KAAjB;AAGA,SAAKC,MAAL,GAAc,IAAInB,KAAK,CAACoB,kBAAV,CAA8B,CAAE,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAE,CAA3C,EAA8C,CAA9C,EAAiD,CAAjD,CAAd;AACA,SAAKC,KAAL,GAAc,IAAIrB,KAAK,CAACsB,KAAV,EAAd;AAEA,SAAKC,IAAL,GAAY,IAAIvB,KAAK,CAACwB,IAAV,CAAgB,IAAIxB,KAAK,CAACyB,mBAAV,CAA+B,CAA/B,EAAkC,CAAlC,CAAhB,EAAuD,IAAvD,CAAZ;AACA,SAAKJ,KAAL,CAAWK,GAAX,CAAgB,KAAKH,IAArB;AAEA,GA9BD;;AAgCAvB,EAAAA,KAAK,CAACC,WAAN,CAAkB0B,SAAlB,GAA8B;AAE7BC,IAAAA,MAAM,EAAE,UAAWC,QAAX,EAAqBC,WAArB,EAAkCC,UAAlC,EAA8CC,KAA9C,EAAsD;AAE7D,WAAKT,IAAL,CAAUV,QAAV,GAAqB,KAAKA,QAA1B;AAEAgB,MAAAA,QAAQ,CAACD,MAAT,CAAiB,KAAKP,KAAtB,EAA6B,KAAKF,MAAlC,EAA0CY,UAA1C;AAEA;AAR4B,GAA9B;AAYA,CAlDD","sourcesContent":["module.exports = function( THREE ){\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.TexturePass = function ( texture, opacity ) {\n\n\t\tif ( THREE.CopyShader === undefined )\n\t\t\tconsole.error( \"THREE.TexturePass relies on THREE.CopyShader\" );\n\n\t\tvar shader = THREE.CopyShader;\n\n\t\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.uniforms[ \"opacity\" ].value = ( opacity !== undefined ) ? opacity : 1.0;\n\t\tthis.uniforms[ \"tDiffuse\" ].value = texture;\n\n\t\tthis.material = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = false;\n\n\n\t\tthis.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tthis.scene  = new THREE.Scene();\n\n\t\tthis.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );\n\t\tthis.scene.add( this.quad );\n\n\t};\n\n\tTHREE.TexturePass.prototype = {\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, delta ) {\n\n\t\t\tthis.quad.material = this.material;\n\n\t\t\trenderer.render( this.scene, this.camera, readBuffer );\n\n\t\t}\n\n\t};\n\n};"]},"metadata":{},"sourceType":"script"}