{"ast":null,"code":"module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n  THREE.FilmPass = function (noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale) {\n    if (THREE.FilmShader === undefined) console.error(\"THREE.FilmPass relies on THREE.FilmShader\");\n    var shader = THREE.FilmShader;\n    this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n    this.material = new THREE.ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    if (grayscale !== undefined) this.uniforms.grayscale.value = grayscale;\n    if (noiseIntensity !== undefined) this.uniforms.nIntensity.value = noiseIntensity;\n    if (scanlinesIntensity !== undefined) this.uniforms.sIntensity.value = scanlinesIntensity;\n    if (scanlinesCount !== undefined) this.uniforms.sCount.value = scanlinesCount;\n    this.enabled = true;\n    this.renderToScreen = false;\n    this.needsSwap = true;\n    this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene = new THREE.Scene();\n    this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n    this.scene.add(this.quad);\n  };\n\n  THREE.FilmPass.prototype = {\n    render: function (renderer, writeBuffer, readBuffer, delta) {\n      this.uniforms[\"tDiffuse\"].value = readBuffer;\n      this.uniforms[\"time\"].value += delta;\n      this.quad.material = this.material;\n\n      if (this.renderToScreen) {\n        renderer.render(this.scene, this.camera);\n      } else {\n        renderer.render(this.scene, this.camera, writeBuffer, false);\n      }\n    }\n  };\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/FilmPass.js"],"names":["module","exports","THREE","FilmPass","noiseIntensity","scanlinesIntensity","scanlinesCount","grayscale","FilmShader","undefined","console","error","shader","uniforms","UniformsUtils","clone","material","ShaderMaterial","vertexShader","fragmentShader","value","nIntensity","sIntensity","sCount","enabled","renderToScreen","needsSwap","camera","OrthographicCamera","scene","Scene","quad","Mesh","PlaneBufferGeometry","add","prototype","render","renderer","writeBuffer","readBuffer","delta"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AAEjC;;;AAIAA,EAAAA,KAAK,CAACC,QAAN,GAAiB,UAAWC,cAAX,EAA2BC,kBAA3B,EAA+CC,cAA/C,EAA+DC,SAA/D,EAA2E;AAE3F,QAAKL,KAAK,CAACM,UAAN,KAAqBC,SAA1B,EACCC,OAAO,CAACC,KAAR,CAAe,2CAAf;AAED,QAAIC,MAAM,GAAGV,KAAK,CAACM,UAAnB;AAEA,SAAKK,QAAL,GAAgBX,KAAK,CAACY,aAAN,CAAoBC,KAApB,CAA2BH,MAAM,CAACC,QAAlC,CAAhB;AAEA,SAAKG,QAAL,GAAgB,IAAId,KAAK,CAACe,cAAV,CAA0B;AAEzCJ,MAAAA,QAAQ,EAAE,KAAKA,QAF0B;AAGzCK,MAAAA,YAAY,EAAEN,MAAM,CAACM,YAHoB;AAIzCC,MAAAA,cAAc,EAAEP,MAAM,CAACO;AAJkB,KAA1B,CAAhB;AAQA,QAAKZ,SAAS,KAAKE,SAAnB,EAA+B,KAAKI,QAAL,CAAcN,SAAd,CAAwBa,KAAxB,GAAgCb,SAAhC;AAC/B,QAAKH,cAAc,KAAKK,SAAxB,EAAoC,KAAKI,QAAL,CAAcQ,UAAd,CAAyBD,KAAzB,GAAiChB,cAAjC;AACpC,QAAKC,kBAAkB,KAAKI,SAA5B,EAAwC,KAAKI,QAAL,CAAcS,UAAd,CAAyBF,KAAzB,GAAiCf,kBAAjC;AACxC,QAAKC,cAAc,KAAKG,SAAxB,EAAoC,KAAKI,QAAL,CAAcU,MAAd,CAAqBH,KAArB,GAA6Bd,cAA7B;AAEpC,SAAKkB,OAAL,GAAe,IAAf;AACA,SAAKC,cAAL,GAAsB,KAAtB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AAGA,SAAKC,MAAL,GAAc,IAAIzB,KAAK,CAAC0B,kBAAV,CAA8B,CAAE,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAE,CAA3C,EAA8C,CAA9C,EAAiD,CAAjD,CAAd;AACA,SAAKC,KAAL,GAAc,IAAI3B,KAAK,CAAC4B,KAAV,EAAd;AAEA,SAAKC,IAAL,GAAY,IAAI7B,KAAK,CAAC8B,IAAV,CAAgB,IAAI9B,KAAK,CAAC+B,mBAAV,CAA+B,CAA/B,EAAkC,CAAlC,CAAhB,EAAuD,IAAvD,CAAZ;AACA,SAAKJ,KAAL,CAAWK,GAAX,CAAgB,KAAKH,IAArB;AAEA,GAjCD;;AAmCA7B,EAAAA,KAAK,CAACC,QAAN,CAAegC,SAAf,GAA2B;AAE1BC,IAAAA,MAAM,EAAE,UAAWC,QAAX,EAAqBC,WAArB,EAAkCC,UAAlC,EAA8CC,KAA9C,EAAsD;AAE7D,WAAK3B,QAAL,CAAe,UAAf,EAA4BO,KAA5B,GAAoCmB,UAApC;AACA,WAAK1B,QAAL,CAAe,MAAf,EAAwBO,KAAxB,IAAiCoB,KAAjC;AAEA,WAAKT,IAAL,CAAUf,QAAV,GAAqB,KAAKA,QAA1B;;AAEA,UAAK,KAAKS,cAAV,EAA2B;AAE1BY,QAAAA,QAAQ,CAACD,MAAT,CAAiB,KAAKP,KAAtB,EAA6B,KAAKF,MAAlC;AAEA,OAJD,MAIO;AAENU,QAAAA,QAAQ,CAACD,MAAT,CAAiB,KAAKP,KAAtB,EAA6B,KAAKF,MAAlC,EAA0CW,WAA1C,EAAuD,KAAvD;AAEA;AAED;AAnByB,GAA3B;AAuBA,CAhED","sourcesContent":["module.exports = function( THREE ){\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.FilmPass = function ( noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale ) {\n\n\t\tif ( THREE.FilmShader === undefined )\n\t\t\tconsole.error( \"THREE.FilmPass relies on THREE.FilmShader\" );\n\n\t\tvar shader = THREE.FilmShader;\n\n\t\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t\tif ( grayscale !== undefined )\tthis.uniforms.grayscale.value = grayscale;\n\t\tif ( noiseIntensity !== undefined ) this.uniforms.nIntensity.value = noiseIntensity;\n\t\tif ( scanlinesIntensity !== undefined ) this.uniforms.sIntensity.value = scanlinesIntensity;\n\t\tif ( scanlinesCount !== undefined ) this.uniforms.sCount.value = scanlinesCount;\n\n\t\tthis.enabled = true;\n\t\tthis.renderToScreen = false;\n\t\tthis.needsSwap = true;\n\n\n\t\tthis.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tthis.scene  = new THREE.Scene();\n\n\t\tthis.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );\n\t\tthis.scene.add( this.quad );\n\n\t};\n\n\tTHREE.FilmPass.prototype = {\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, delta ) {\n\n\t\t\tthis.uniforms[ \"tDiffuse\" ].value = readBuffer;\n\t\t\tthis.uniforms[ \"time\" ].value += delta;\n\n\t\t\tthis.quad.material = this.material;\n\n\t\t\tif ( this.renderToScreen ) {\n\n\t\t\t\trenderer.render( this.scene, this.camera );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( this.scene, this.camera, writeBuffer, false );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n};\n"]},"metadata":{},"sourceType":"script"}