{"ast":null,"code":"module.exports = function (THREE) {\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author supereggbert / http://www.paulbrunt.co.uk/\n   * @author julianwa / https://github.com/julianwa\n   */\n  THREE.RenderableObject = function () {\n    this.id = 0;\n    this.object = null;\n    this.z = 0;\n    this.renderOrder = 0;\n  }; //\n\n\n  THREE.RenderableFace = function () {\n    this.id = 0;\n    this.v1 = new THREE.RenderableVertex();\n    this.v2 = new THREE.RenderableVertex();\n    this.v3 = new THREE.RenderableVertex();\n    this.normalModel = new THREE.Vector3();\n    this.vertexNormalsModel = [new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()];\n    this.vertexNormalsLength = 0;\n    this.color = new THREE.Color();\n    this.material = null;\n    this.uvs = [new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2()];\n    this.z = 0;\n    this.renderOrder = 0;\n  }; //\n\n\n  THREE.RenderableVertex = function () {\n    this.position = new THREE.Vector3();\n    this.positionWorld = new THREE.Vector3();\n    this.positionScreen = new THREE.Vector4();\n    this.visible = true;\n  };\n\n  THREE.RenderableVertex.prototype.copy = function (vertex) {\n    this.positionWorld.copy(vertex.positionWorld);\n    this.positionScreen.copy(vertex.positionScreen);\n  }; //\n\n\n  THREE.RenderableLine = function () {\n    this.id = 0;\n    this.v1 = new THREE.RenderableVertex();\n    this.v2 = new THREE.RenderableVertex();\n    this.vertexColors = [new THREE.Color(), new THREE.Color()];\n    this.material = null;\n    this.z = 0;\n    this.renderOrder = 0;\n  }; //\n\n\n  THREE.RenderableSprite = function () {\n    this.id = 0;\n    this.object = null;\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.rotation = 0;\n    this.scale = new THREE.Vector2();\n    this.material = null;\n    this.renderOrder = 0;\n  }; //\n\n\n  THREE.Projector = function () {\n    var _object,\n        _objectCount,\n        _objectPool = [],\n        _objectPoolLength = 0,\n        _vertex,\n        _vertexCount,\n        _vertexPool = [],\n        _vertexPoolLength = 0,\n        _face,\n        _faceCount,\n        _facePool = [],\n        _facePoolLength = 0,\n        _line,\n        _lineCount,\n        _linePool = [],\n        _linePoolLength = 0,\n        _sprite,\n        _spriteCount,\n        _spritePool = [],\n        _spritePoolLength = 0,\n        _renderData = {\n      objects: [],\n      lights: [],\n      elements: []\n    },\n        _vector3 = new THREE.Vector3(),\n        _vector4 = new THREE.Vector4(),\n        _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)),\n        _boundingBox = new THREE.Box3(),\n        _points3 = new Array(3),\n        _points4 = new Array(4),\n        _viewMatrix = new THREE.Matrix4(),\n        _viewProjectionMatrix = new THREE.Matrix4(),\n        _modelMatrix,\n        _modelViewProjectionMatrix = new THREE.Matrix4(),\n        _normalMatrix = new THREE.Matrix3(),\n        _frustum = new THREE.Frustum(),\n        _clippedVertex1PositionScreen = new THREE.Vector4(),\n        _clippedVertex2PositionScreen = new THREE.Vector4(); //\n\n\n    this.projectVector = function (vector, camera) {\n      console.warn('THREE.Projector: .projectVector() is now vector.project().');\n      vector.project(camera);\n    };\n\n    this.unprojectVector = function (vector, camera) {\n      console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');\n      vector.unproject(camera);\n    };\n\n    this.pickingRay = function (vector, camera) {\n      console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');\n    }; //\n\n\n    var RenderList = function () {\n      var normals = [];\n      var uvs = [];\n      var object = null;\n      var material = null;\n      var normalMatrix = new THREE.Matrix3();\n\n      function setObject(value) {\n        object = value;\n        material = object.material;\n        normalMatrix.getNormalMatrix(object.matrixWorld);\n        normals.length = 0;\n        uvs.length = 0;\n      }\n\n      function projectVertex(vertex) {\n        var position = vertex.position;\n        var positionWorld = vertex.positionWorld;\n        var positionScreen = vertex.positionScreen;\n        positionWorld.copy(position).applyMatrix4(_modelMatrix);\n        positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n        var invW = 1 / positionScreen.w;\n        positionScreen.x *= invW;\n        positionScreen.y *= invW;\n        positionScreen.z *= invW;\n        vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n      }\n\n      function pushVertex(x, y, z) {\n        _vertex = getNextVertexInPool();\n\n        _vertex.position.set(x, y, z);\n\n        projectVertex(_vertex);\n      }\n\n      function pushNormal(x, y, z) {\n        normals.push(x, y, z);\n      }\n\n      function pushUv(x, y) {\n        uvs.push(x, y);\n      }\n\n      function checkTriangleVisibility(v1, v2, v3) {\n        if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n        _points3[0] = v1.positionScreen;\n        _points3[1] = v2.positionScreen;\n        _points3[2] = v3.positionScreen;\n        return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n      }\n\n      function checkBackfaceCulling(v1, v2, v3) {\n        return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n      }\n\n      function pushLine(a, b) {\n        var v1 = _vertexPool[a];\n        var v2 = _vertexPool[b];\n        _line = getNextLineInPool();\n        _line.id = object.id;\n\n        _line.v1.copy(v1);\n\n        _line.v2.copy(v2);\n\n        _line.z = (v1.positionScreen.z + v2.positionScreen.z) / 2;\n        _line.renderOrder = object.renderOrder;\n        _line.material = object.material;\n\n        _renderData.elements.push(_line);\n      }\n\n      function pushTriangle(a, b, c) {\n        var v1 = _vertexPool[a];\n        var v2 = _vertexPool[b];\n        var v3 = _vertexPool[c];\n        if (checkTriangleVisibility(v1, v2, v3) === false) return;\n\n        if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n          _face = getNextFaceInPool();\n          _face.id = object.id;\n\n          _face.v1.copy(v1);\n\n          _face.v2.copy(v2);\n\n          _face.v3.copy(v3);\n\n          _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n          _face.renderOrder = object.renderOrder; // use first vertex normal as face normal\n\n          _face.normalModel.fromArray(normals, a * 3);\n\n          _face.normalModel.applyMatrix3(normalMatrix).normalize();\n\n          for (var i = 0; i < 3; i++) {\n            var normal = _face.vertexNormalsModel[i];\n            normal.fromArray(normals, arguments[i] * 3);\n            normal.applyMatrix3(normalMatrix).normalize();\n            var uv = _face.uvs[i];\n            uv.fromArray(uvs, arguments[i] * 2);\n          }\n\n          _face.vertexNormalsLength = 3;\n          _face.material = object.material;\n\n          _renderData.elements.push(_face);\n        }\n      }\n\n      return {\n        setObject: setObject,\n        projectVertex: projectVertex,\n        checkTriangleVisibility: checkTriangleVisibility,\n        checkBackfaceCulling: checkBackfaceCulling,\n        pushVertex: pushVertex,\n        pushNormal: pushNormal,\n        pushUv: pushUv,\n        pushLine: pushLine,\n        pushTriangle: pushTriangle\n      };\n    };\n\n    var renderList = new RenderList();\n\n    this.projectScene = function (scene, camera, sortObjects, sortElements) {\n      _faceCount = 0;\n      _lineCount = 0;\n      _spriteCount = 0;\n      _renderData.elements.length = 0;\n      if (scene.autoUpdate === true) scene.updateMatrixWorld();\n      if (camera.parent === null) camera.updateMatrixWorld();\n\n      _viewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));\n\n      _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\n      _frustum.setFromMatrix(_viewProjectionMatrix); //\n\n\n      _objectCount = 0;\n      _renderData.objects.length = 0;\n      _renderData.lights.length = 0;\n      scene.traverseVisible(function (object) {\n        if (object instanceof THREE.Light) {\n          _renderData.lights.push(object);\n        } else if (object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite) {\n          var material = object.material;\n          if (material.visible === false) return;\n\n          if (object.frustumCulled === false || _frustum.intersectsObject(object) === true) {\n            _object = getNextObjectInPool();\n            _object.id = object.id;\n            _object.object = object;\n\n            _vector3.setFromMatrixPosition(object.matrixWorld);\n\n            _vector3.applyProjection(_viewProjectionMatrix);\n\n            _object.z = _vector3.z;\n            _object.renderOrder = object.renderOrder;\n\n            _renderData.objects.push(_object);\n          }\n        }\n      });\n\n      if (sortObjects === true) {\n        _renderData.objects.sort(painterSort);\n      } //\n\n\n      for (var o = 0, ol = _renderData.objects.length; o < ol; o++) {\n        var object = _renderData.objects[o].object;\n        var geometry = object.geometry;\n        renderList.setObject(object);\n        _modelMatrix = object.matrixWorld;\n        _vertexCount = 0;\n\n        if (object instanceof THREE.Mesh) {\n          if (geometry instanceof THREE.BufferGeometry) {\n            var attributes = geometry.attributes;\n            var groups = geometry.groups;\n            if (attributes.position === undefined) continue;\n            var positions = attributes.position.array;\n\n            for (var i = 0, l = positions.length; i < l; i += 3) {\n              renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n            }\n\n            if (attributes.normal !== undefined) {\n              var normals = attributes.normal.array;\n\n              for (var i = 0, l = normals.length; i < l; i += 3) {\n                renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n              }\n            }\n\n            if (attributes.uv !== undefined) {\n              var uvs = attributes.uv.array;\n\n              for (var i = 0, l = uvs.length; i < l; i += 2) {\n                renderList.pushUv(uvs[i], uvs[i + 1]);\n              }\n            }\n\n            if (geometry.index !== null) {\n              var indices = geometry.index.array;\n\n              if (groups.length > 0) {\n                for (var o = 0; o < groups.length; o++) {\n                  var group = groups[o];\n\n                  for (var i = group.start, l = group.start + group.count; i < l; i += 3) {\n                    renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n                  }\n                }\n              } else {\n                for (var i = 0, l = indices.length; i < l; i += 3) {\n                  renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n                }\n              }\n            } else {\n              for (var i = 0, l = positions.length / 3; i < l; i += 3) {\n                renderList.pushTriangle(i, i + 1, i + 2);\n              }\n            }\n          } else if (geometry instanceof THREE.Geometry) {\n            var vertices = geometry.vertices;\n            var faces = geometry.faces;\n            var faceVertexUvs = geometry.faceVertexUvs[0];\n\n            _normalMatrix.getNormalMatrix(_modelMatrix);\n\n            var material = object.material;\n            var isFaceMaterial = material instanceof THREE.MultiMaterial;\n            var objectMaterials = isFaceMaterial === true ? object.material : null;\n\n            for (var v = 0, vl = vertices.length; v < vl; v++) {\n              var vertex = vertices[v];\n\n              _vector3.copy(vertex);\n\n              if (material.morphTargets === true) {\n                var morphTargets = geometry.morphTargets;\n                var morphInfluences = object.morphTargetInfluences;\n\n                for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n                  var influence = morphInfluences[t];\n                  if (influence === 0) continue;\n                  var target = morphTargets[t];\n                  var targetVertex = target.vertices[v];\n                  _vector3.x += (targetVertex.x - vertex.x) * influence;\n                  _vector3.y += (targetVertex.y - vertex.y) * influence;\n                  _vector3.z += (targetVertex.z - vertex.z) * influence;\n                }\n              }\n\n              renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);\n            }\n\n            for (var f = 0, fl = faces.length; f < fl; f++) {\n              var face = faces[f];\n              material = isFaceMaterial === true ? objectMaterials.materials[face.materialIndex] : object.material;\n              if (material === undefined) continue;\n              var side = material.side;\n              var v1 = _vertexPool[face.a];\n              var v2 = _vertexPool[face.b];\n              var v3 = _vertexPool[face.c];\n              if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;\n              var visible = renderList.checkBackfaceCulling(v1, v2, v3);\n\n              if (side !== THREE.DoubleSide) {\n                if (side === THREE.FrontSide && visible === false) continue;\n                if (side === THREE.BackSide && visible === true) continue;\n              }\n\n              _face = getNextFaceInPool();\n              _face.id = object.id;\n\n              _face.v1.copy(v1);\n\n              _face.v2.copy(v2);\n\n              _face.v3.copy(v3);\n\n              _face.normalModel.copy(face.normal);\n\n              if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n                _face.normalModel.negate();\n              }\n\n              _face.normalModel.applyMatrix3(_normalMatrix).normalize();\n\n              var faceVertexNormals = face.vertexNormals;\n\n              for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {\n                var normalModel = _face.vertexNormalsModel[n];\n                normalModel.copy(faceVertexNormals[n]);\n\n                if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n                  normalModel.negate();\n                }\n\n                normalModel.applyMatrix3(_normalMatrix).normalize();\n              }\n\n              _face.vertexNormalsLength = faceVertexNormals.length;\n              var vertexUvs = faceVertexUvs[f];\n\n              if (vertexUvs !== undefined) {\n                for (var u = 0; u < 3; u++) {\n                  _face.uvs[u].copy(vertexUvs[u]);\n                }\n              }\n\n              _face.color = face.color;\n              _face.material = material;\n              _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n              _face.renderOrder = object.renderOrder;\n\n              _renderData.elements.push(_face);\n            }\n          }\n        } else if (object instanceof THREE.Line) {\n          if (geometry instanceof THREE.BufferGeometry) {\n            var attributes = geometry.attributes;\n\n            if (attributes.position !== undefined) {\n              var positions = attributes.position.array;\n\n              for (var i = 0, l = positions.length; i < l; i += 3) {\n                renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n              }\n\n              if (geometry.index !== null) {\n                var indices = geometry.index.array;\n\n                for (var i = 0, l = indices.length; i < l; i += 2) {\n                  renderList.pushLine(indices[i], indices[i + 1]);\n                }\n              } else {\n                var step = object instanceof THREE.LineSegments ? 2 : 1;\n\n                for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                  renderList.pushLine(i, i + 1);\n                }\n              }\n            }\n          } else if (geometry instanceof THREE.Geometry) {\n            _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\n            var vertices = object.geometry.vertices;\n            if (vertices.length === 0) continue;\n            v1 = getNextVertexInPool();\n            v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);\n            var step = object instanceof THREE.LineSegments ? 2 : 1;\n\n            for (var v = 1, vl = vertices.length; v < vl; v++) {\n              v1 = getNextVertexInPool();\n              v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);\n              if ((v + 1) % step > 0) continue;\n              v2 = _vertexPool[_vertexCount - 2];\n\n              _clippedVertex1PositionScreen.copy(v1.positionScreen);\n\n              _clippedVertex2PositionScreen.copy(v2.positionScreen);\n\n              if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {\n                // Perform the perspective divide\n                _clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);\n\n                _clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);\n\n                _line = getNextLineInPool();\n                _line.id = object.id;\n\n                _line.v1.positionScreen.copy(_clippedVertex1PositionScreen);\n\n                _line.v2.positionScreen.copy(_clippedVertex2PositionScreen);\n\n                _line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);\n                _line.renderOrder = object.renderOrder;\n                _line.material = object.material;\n\n                if (object.material.vertexColors === THREE.VertexColors) {\n                  _line.vertexColors[0].copy(object.geometry.colors[v]);\n\n                  _line.vertexColors[1].copy(object.geometry.colors[v - 1]);\n                }\n\n                _renderData.elements.push(_line);\n              }\n            }\n          }\n        } else if (object instanceof THREE.Sprite) {\n          _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n\n          _vector4.applyMatrix4(_viewProjectionMatrix);\n\n          var invW = 1 / _vector4.w;\n          _vector4.z *= invW;\n\n          if (_vector4.z >= -1 && _vector4.z <= 1) {\n            _sprite = getNextSpriteInPool();\n            _sprite.id = object.id;\n            _sprite.x = _vector4.x * invW;\n            _sprite.y = _vector4.y * invW;\n            _sprite.z = _vector4.z;\n            _sprite.renderOrder = object.renderOrder;\n            _sprite.object = object;\n            _sprite.rotation = object.rotation;\n            _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n            _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n            _sprite.material = object.material;\n\n            _renderData.elements.push(_sprite);\n          }\n        }\n      }\n\n      if (sortElements === true) {\n        _renderData.elements.sort(painterSort);\n      }\n\n      return _renderData;\n    }; // Pools\n\n\n    function getNextObjectInPool() {\n      if (_objectCount === _objectPoolLength) {\n        var object = new THREE.RenderableObject();\n\n        _objectPool.push(object);\n\n        _objectPoolLength++;\n        _objectCount++;\n        return object;\n      }\n\n      return _objectPool[_objectCount++];\n    }\n\n    function getNextVertexInPool() {\n      if (_vertexCount === _vertexPoolLength) {\n        var vertex = new THREE.RenderableVertex();\n\n        _vertexPool.push(vertex);\n\n        _vertexPoolLength++;\n        _vertexCount++;\n        return vertex;\n      }\n\n      return _vertexPool[_vertexCount++];\n    }\n\n    function getNextFaceInPool() {\n      if (_faceCount === _facePoolLength) {\n        var face = new THREE.RenderableFace();\n\n        _facePool.push(face);\n\n        _facePoolLength++;\n        _faceCount++;\n        return face;\n      }\n\n      return _facePool[_faceCount++];\n    }\n\n    function getNextLineInPool() {\n      if (_lineCount === _linePoolLength) {\n        var line = new THREE.RenderableLine();\n\n        _linePool.push(line);\n\n        _linePoolLength++;\n        _lineCount++;\n        return line;\n      }\n\n      return _linePool[_lineCount++];\n    }\n\n    function getNextSpriteInPool() {\n      if (_spriteCount === _spritePoolLength) {\n        var sprite = new THREE.RenderableSprite();\n\n        _spritePool.push(sprite);\n\n        _spritePoolLength++;\n        _spriteCount++;\n        return sprite;\n      }\n\n      return _spritePool[_spriteCount++];\n    } //\n\n\n    function painterSort(a, b) {\n      if (a.renderOrder !== b.renderOrder) {\n        return a.renderOrder - b.renderOrder;\n      } else if (a.z !== b.z) {\n        return b.z - a.z;\n      } else if (a.id !== b.id) {\n        return a.id - b.id;\n      } else {\n        return 0;\n      }\n    }\n\n    function clipLine(s1, s2) {\n      var alpha1 = 0,\n          alpha2 = 1,\n          // Calculate the boundary coordinate of each vertex for the near and far clip planes,\n      // Z = -1 and Z = +1, respectively.\n      bc1near = s1.z + s1.w,\n          bc2near = s2.z + s2.w,\n          bc1far = -s1.z + s1.w,\n          bc2far = -s2.z + s2.w;\n\n      if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n        // Both vertices lie entirely within all clip planes.\n        return true;\n      } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n        // Both vertices lie entirely outside one of the clip planes.\n        return false;\n      } else {\n        // The line segment spans at least one clip plane.\n        if (bc1near < 0) {\n          // v1 lies outside the near plane, v2 inside\n          alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n        } else if (bc2near < 0) {\n          // v2 lies outside the near plane, v1 inside\n          alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n        }\n\n        if (bc1far < 0) {\n          // v1 lies outside the far plane, v2 inside\n          alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n        } else if (bc2far < 0) {\n          // v2 lies outside the far plane, v2 inside\n          alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n        }\n\n        if (alpha2 < alpha1) {\n          // The line segment spans two boundaries, but is outside both of them.\n          // (This can't happen when we're only clipping against just near/far but good\n          //  to leave the check here for future usage if other clip planes are added.)\n          return false;\n        } else {\n          // Update the s1 and s2 vertices to match the clipped line segment.\n          s1.lerp(s2, alpha1);\n          s2.lerp(s1, 1 - alpha2);\n          return true;\n        }\n      }\n    }\n  };\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/Projector.js"],"names":["module","exports","THREE","RenderableObject","id","object","z","renderOrder","RenderableFace","v1","RenderableVertex","v2","v3","normalModel","Vector3","vertexNormalsModel","vertexNormalsLength","color","Color","material","uvs","Vector2","position","positionWorld","positionScreen","Vector4","visible","prototype","copy","vertex","RenderableLine","vertexColors","RenderableSprite","x","y","rotation","scale","Projector","_object","_objectCount","_objectPool","_objectPoolLength","_vertex","_vertexCount","_vertexPool","_vertexPoolLength","_face","_faceCount","_facePool","_facePoolLength","_line","_lineCount","_linePool","_linePoolLength","_sprite","_spriteCount","_spritePool","_spritePoolLength","_renderData","objects","lights","elements","_vector3","_vector4","_clipBox","Box3","_boundingBox","_points3","Array","_points4","_viewMatrix","Matrix4","_viewProjectionMatrix","_modelMatrix","_modelViewProjectionMatrix","_normalMatrix","Matrix3","_frustum","Frustum","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","vector","camera","console","warn","project","unprojectVector","unproject","pickingRay","error","RenderList","normals","normalMatrix","setObject","value","getNormalMatrix","matrixWorld","length","projectVertex","applyMatrix4","invW","w","pushVertex","getNextVertexInPool","set","pushNormal","push","pushUv","checkTriangleVisibility","intersectsBox","setFromPoints","checkBackfaceCulling","pushLine","a","b","getNextLineInPool","pushTriangle","c","side","DoubleSide","getNextFaceInPool","fromArray","applyMatrix3","normalize","i","normal","arguments","uv","renderList","projectScene","scene","sortObjects","sortElements","autoUpdate","updateMatrixWorld","parent","matrixWorldInverse","getInverse","multiplyMatrices","projectionMatrix","setFromMatrix","traverseVisible","Light","Mesh","Line","Sprite","frustumCulled","intersectsObject","getNextObjectInPool","setFromMatrixPosition","applyProjection","sort","painterSort","o","ol","geometry","BufferGeometry","attributes","groups","undefined","positions","array","l","index","indices","group","start","count","Geometry","vertices","faces","faceVertexUvs","isFaceMaterial","MultiMaterial","objectMaterials","v","vl","morphTargets","morphInfluences","morphTargetInfluences","t","tl","influence","target","targetVertex","f","fl","face","materials","materialIndex","FrontSide","BackSide","negate","faceVertexNormals","vertexNormals","n","nl","Math","min","vertexUvs","u","step","LineSegments","clipLine","multiplyScalar","max","VertexColors","colors","getNextSpriteInPool","abs","line","sprite","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","lerp"],"mappings":"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","sourcesContent":["module.exports = function( THREE ){\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author julianwa / https://github.com/julianwa\n\t */\n\n\tTHREE.RenderableObject = function () {\n\n\t\tthis.id = 0;\n\n\t\tthis.object = null;\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\n\t};\n\n\t//\n\n\tTHREE.RenderableFace = function () {\n\n\t\tthis.id = 0;\n\n\t\tthis.v1 = new THREE.RenderableVertex();\n\t\tthis.v2 = new THREE.RenderableVertex();\n\t\tthis.v3 = new THREE.RenderableVertex();\n\n\t\tthis.normalModel = new THREE.Vector3();\n\n\t\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\t\tthis.vertexNormalsLength = 0;\n\n\t\tthis.color = new THREE.Color();\n\t\tthis.material = null;\n\t\tthis.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\n\t};\n\n\t//\n\n\tTHREE.RenderableVertex = function () {\n\n\t\tthis.position = new THREE.Vector3();\n\t\tthis.positionWorld = new THREE.Vector3();\n\t\tthis.positionScreen = new THREE.Vector4();\n\n\t\tthis.visible = true;\n\n\t};\n\n\tTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\n\n\t\tthis.positionWorld.copy( vertex.positionWorld );\n\t\tthis.positionScreen.copy( vertex.positionScreen );\n\n\t};\n\n\t//\n\n\tTHREE.RenderableLine = function () {\n\n\t\tthis.id = 0;\n\n\t\tthis.v1 = new THREE.RenderableVertex();\n\t\tthis.v2 = new THREE.RenderableVertex();\n\n\t\tthis.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\t\tthis.material = null;\n\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\n\t};\n\n\t//\n\n\tTHREE.RenderableSprite = function () {\n\n\t\tthis.id = 0;\n\n\t\tthis.object = null;\n\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t\tthis.z = 0;\n\n\t\tthis.rotation = 0;\n\t\tthis.scale = new THREE.Vector2();\n\n\t\tthis.material = null;\n\t\tthis.renderOrder = 0;\n\n\t};\n\n\t//\n\n\tTHREE.Projector = function () {\n\n\t\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\n\t\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\n\t\t_face, _faceCount, _facePool = [], _facePoolLength = 0,\n\t\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\n\t\t_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\n\n\t\t_renderData = { objects: [], lights: [], elements: [] },\n\n\t\t_vector3 = new THREE.Vector3(),\n\t\t_vector4 = new THREE.Vector4(),\n\n\t\t_clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),\n\t\t_boundingBox = new THREE.Box3(),\n\t\t_points3 = new Array( 3 ),\n\t\t_points4 = new Array( 4 ),\n\n\t\t_viewMatrix = new THREE.Matrix4(),\n\t\t_viewProjectionMatrix = new THREE.Matrix4(),\n\n\t\t_modelMatrix,\n\t\t_modelViewProjectionMatrix = new THREE.Matrix4(),\n\n\t\t_normalMatrix = new THREE.Matrix3(),\n\n\t\t_frustum = new THREE.Frustum(),\n\n\t\t_clippedVertex1PositionScreen = new THREE.Vector4(),\n\t\t_clippedVertex2PositionScreen = new THREE.Vector4();\n\n\t\t//\n\n\t\tthis.projectVector = function ( vector, camera ) {\n\n\t\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\t\tvector.project( camera );\n\n\t\t};\n\n\t\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\t\tvector.unproject( camera );\n\n\t\t};\n\n\t\tthis.pickingRay = function ( vector, camera ) {\n\n\t\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t\t};\n\n\t\t//\n\n\t\tvar RenderList = function () {\n\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\tvar object = null;\n\t\t\tvar material = null;\n\n\t\t\tvar normalMatrix = new THREE.Matrix3();\n\n\t\t\tfunction setObject( value ) {\n\n\t\t\t\tobject = value;\n\t\t\t\tmaterial = object.material;\n\n\t\t\t\tnormalMatrix.getNormalMatrix( object.matrixWorld );\n\n\t\t\t\tnormals.length = 0;\n\t\t\t\tuvs.length = 0;\n\n\t\t\t}\n\n\t\t\tfunction projectVertex( vertex ) {\n\n\t\t\t\tvar position = vertex.position;\n\t\t\t\tvar positionWorld = vertex.positionWorld;\n\t\t\t\tvar positionScreen = vertex.positionScreen;\n\n\t\t\t\tpositionWorld.copy( position ).applyMatrix4( _modelMatrix );\n\t\t\t\tpositionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\tvar invW = 1 / positionScreen.w;\n\n\t\t\t\tpositionScreen.x *= invW;\n\t\t\t\tpositionScreen.y *= invW;\n\t\t\t\tpositionScreen.z *= invW;\n\n\t\t\t\tvertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\n\t\t\t\t\t\t positionScreen.y >= - 1 && positionScreen.y <= 1 &&\n\t\t\t\t\t\t positionScreen.z >= - 1 && positionScreen.z <= 1;\n\n\t\t\t}\n\n\t\t\tfunction pushVertex( x, y, z ) {\n\n\t\t\t\t_vertex = getNextVertexInPool();\n\t\t\t\t_vertex.position.set( x, y, z );\n\n\t\t\t\tprojectVertex( _vertex );\n\n\t\t\t}\n\n\t\t\tfunction pushNormal( x, y, z ) {\n\n\t\t\t\tnormals.push( x, y, z );\n\n\t\t\t}\n\n\t\t\tfunction pushUv( x, y ) {\n\n\t\t\t\tuvs.push( x, y );\n\n\t\t\t}\n\n\t\t\tfunction checkTriangleVisibility( v1, v2, v3 ) {\n\n\t\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\n\n\t\t\t\t_points3[ 0 ] = v1.positionScreen;\n\t\t\t\t_points3[ 1 ] = v2.positionScreen;\n\t\t\t\t_points3[ 2 ] = v3.positionScreen;\n\n\t\t\t\treturn _clipBox.intersectsBox( _boundingBox.setFromPoints( _points3 ) );\n\n\t\t\t}\n\n\t\t\tfunction checkBackfaceCulling( v1, v2, v3 ) {\n\n\t\t\t\treturn ( ( v3.positionScreen.x - v1.positionScreen.x ) *\n\t\t\t\t\t    ( v2.positionScreen.y - v1.positionScreen.y ) -\n\t\t\t\t\t    ( v3.positionScreen.y - v1.positionScreen.y ) *\n\t\t\t\t\t    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\n\n\t\t\t}\n\n\t\t\tfunction pushLine( a, b ) {\n\n\t\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\t\tvar v2 = _vertexPool[ b ];\n\n\t\t\t\t_line = getNextLineInPool();\n\n\t\t\t\t_line.id = object.id;\n\t\t\t\t_line.v1.copy( v1 );\n\t\t\t\t_line.v2.copy( v2 );\n\t\t\t\t_line.z = ( v1.positionScreen.z + v2.positionScreen.z ) / 2;\n\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t_line.material = object.material;\n\n\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t}\n\n\t\t\tfunction pushTriangle( a, b, c ) {\n\n\t\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\t\tvar v2 = _vertexPool[ b ];\n\t\t\t\tvar v3 = _vertexPool[ c ];\n\n\t\t\t\tif ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\n\n\t\t\t\tif ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\n\n\t\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t_face.v3.copy( v3 );\n\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t\t// use first vertex normal as face normal\n\n\t\t\t\t\t_face.normalModel.fromArray( normals, a * 3 );\n\t\t\t\t\t_face.normalModel.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\tvar normal = _face.vertexNormalsModel[ i ];\n\t\t\t\t\t\tnormal.fromArray( normals, arguments[ i ] * 3 );\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t\tvar uv = _face.uvs[ i ];\n\t\t\t\t\t\tuv.fromArray( uvs, arguments[ i ] * 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_face.vertexNormalsLength = 3;\n\n\t\t\t\t\t_face.material = object.material;\n\n\t\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tsetObject: setObject,\n\t\t\t\tprojectVertex: projectVertex,\n\t\t\t\tcheckTriangleVisibility: checkTriangleVisibility,\n\t\t\t\tcheckBackfaceCulling: checkBackfaceCulling,\n\t\t\t\tpushVertex: pushVertex,\n\t\t\t\tpushNormal: pushNormal,\n\t\t\t\tpushUv: pushUv,\n\t\t\t\tpushLine: pushLine,\n\t\t\t\tpushTriangle: pushTriangle\n\t\t\t}\n\n\t\t};\n\n\t\tvar renderList = new RenderList();\n\n\t\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\n\n\t\t\t_faceCount = 0;\n\t\t\t_lineCount = 0;\n\t\t\t_spriteCount = 0;\n\n\t\t\t_renderData.elements.length = 0;\n\n\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t\t_viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );\n\t\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n\t\t\t_frustum.setFromMatrix( _viewProjectionMatrix );\n\n\t\t\t//\n\n\t\t\t_objectCount = 0;\n\n\t\t\t_renderData.objects.length = 0;\n\t\t\t_renderData.lights.length = 0;\n\n\t\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\t\tif ( object instanceof THREE.Light ) {\n\n\t\t\t\t\t_renderData.lights.push( object );\n\n\t\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite ) {\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( material.visible === false ) return;\n\n\t\t\t\t\tif ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {\n\n\t\t\t\t\t\t_object = getNextObjectInPool();\n\t\t\t\t\t\t_object.id = object.id;\n\t\t\t\t\t\t_object.object = object;\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\n\t\t\t\t\t\t_object.z = _vector3.z;\n\t\t\t\t\t\t_object.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t_renderData.objects.push( _object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tif ( sortObjects === true ) {\n\n\t\t\t\t_renderData.objects.sort( painterSort );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( var o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {\n\n\t\t\t\tvar object = _renderData.objects[ o ].object;\n\t\t\t\tvar geometry = object.geometry;\n\n\t\t\t\trenderList.setObject( object );\n\n\t\t\t\t_modelMatrix = object.matrixWorld;\n\n\t\t\t\t_vertexCount = 0;\n\n\t\t\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tif ( attributes.position === undefined ) continue;\n\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( attributes.normal !== undefined ) {\n\n\t\t\t\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = normals.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\n\t\t\t\t\t\t\tvar uvs = attributes.uv.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = uvs.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\t\t\t\t\tfor ( var o = 0; o < groups.length; o ++ ) {\n\n\t\t\t\t\t\t\t\t\tvar group = groups[ o ];\n\n\t\t\t\t\t\t\t\t\tfor ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\n\t\t\t\t\t\t_normalMatrix.getNormalMatrix( _modelMatrix );\n\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t\t\t\t\t\tvar objectMaterials = isFaceMaterial === true ? object.material : null;\n\n\t\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\t\tvar vertex = vertices[ v ];\n\n\t\t\t\t\t\t\t_vector3.copy( vertex );\n\n\t\t\t\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\n\t\t\t\t\t\t\t\t\tvar targetVertex = target.vertices[ v ];\n\n\t\t\t\t\t\t\t\t\t_vector3.x += ( targetVertex.x - vertex.x ) * influence;\n\t\t\t\t\t\t\t\t\t_vector3.y += ( targetVertex.y - vertex.y ) * influence;\n\t\t\t\t\t\t\t\t\t_vector3.z += ( targetVertex.z - vertex.z ) * influence;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\trenderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\t\tvar face = faces[ f ];\n\n\t\t\t\t\t\t\tmaterial = isFaceMaterial === true\n\t\t\t\t\t\t\t\t ? objectMaterials.materials[ face.materialIndex ]\n\t\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\t\tvar side = material.side;\n\n\t\t\t\t\t\t\tvar v1 = _vertexPool[ face.a ];\n\t\t\t\t\t\t\tvar v2 = _vertexPool[ face.b ];\n\t\t\t\t\t\t\tvar v3 = _vertexPool[ face.c ];\n\n\t\t\t\t\t\t\tif ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;\n\n\t\t\t\t\t\t\tvar visible = renderList.checkBackfaceCulling( v1, v2, v3 );\n\n\t\t\t\t\t\t\tif ( side !== THREE.DoubleSide ) {\n\n\t\t\t\t\t\t\t\tif ( side === THREE.FrontSide && visible === false ) continue;\n\t\t\t\t\t\t\t\tif ( side === THREE.BackSide && visible === true ) continue;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t\t\t_face.v3.copy( v3 );\n\n\t\t\t\t\t\t\t_face.normalModel.copy( face.normal );\n\n\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t\t_face.normalModel.negate();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\t\tvar faceVertexNormals = face.vertexNormals;\n\n\t\t\t\t\t\t\tfor ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\n\n\t\t\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\n\t\t\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\n\n\t\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t\t\tnormalModel.negate();\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\n\n\t\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ f ];\n\n\t\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\t\t\tfor ( var u = 0; u < 3; u ++ ) {\n\n\t\t\t\t\t\t\t\t\t_face.uvs[ u ].copy( vertexUvs[ u ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_face.color = face.color;\n\t\t\t\t\t\t\t_face.material = material;\n\n\t\t\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\t\tvar attributes = geometry.attributes;\n\n\t\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushLine( indices[ i ], indices[ i + 1 ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushLine( i, i + 1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\t\t\tvar vertices = object.geometry.vertices;\n\n\t\t\t\t\t\tif ( vertices.length === 0 ) continue;\n\n\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\t\tfor ( var v = 1, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\n\n\t\t\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\n\n\t\t\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\n\t\t\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\n\n\t\t\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\n\n\t\t\t\t\t\t\t\t// Perform the perspective divide\n\t\t\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\n\t\t\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\n\n\t\t\t\t\t\t\t\t_line = getNextLineInPool();\n\n\t\t\t\t\t\t\t\t_line.id = object.id;\n\t\t\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\n\t\t\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\n\n\t\t\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\n\t\t\t\t\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t\t\t_line.material = object.material;\n\n\t\t\t\t\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\n\n\t\t\t\t\t\t\t\t\t_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\n\t\t\t\t\t\t\t\t\t_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\t\t_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\n\t\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\t\tvar invW = 1 / _vector4.w;\n\n\t\t\t\t\t_vector4.z *= invW;\n\n\t\t\t\t\tif ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\n\n\t\t\t\t\t\t_sprite = getNextSpriteInPool();\n\t\t\t\t\t\t_sprite.id = object.id;\n\t\t\t\t\t\t_sprite.x = _vector4.x * invW;\n\t\t\t\t\t\t_sprite.y = _vector4.y * invW;\n\t\t\t\t\t\t_sprite.z = _vector4.z;\n\t\t\t\t\t\t_sprite.renderOrder = object.renderOrder;\n\t\t\t\t\t\t_sprite.object = object;\n\n\t\t\t\t\t\t_sprite.rotation = object.rotation;\n\n\t\t\t\t\t\t_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\n\t\t\t\t\t\t_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\n\n\t\t\t\t\t\t_sprite.material = object.material;\n\n\t\t\t\t\t\t_renderData.elements.push( _sprite );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( sortElements === true ) {\n\n\t\t\t\t_renderData.elements.sort( painterSort );\n\n\t\t\t}\n\n\t\t\treturn _renderData;\n\n\t\t};\n\n\t\t// Pools\n\n\t\tfunction getNextObjectInPool() {\n\n\t\t\tif ( _objectCount === _objectPoolLength ) {\n\n\t\t\t\tvar object = new THREE.RenderableObject();\n\t\t\t\t_objectPool.push( object );\n\t\t\t\t_objectPoolLength ++;\n\t\t\t\t_objectCount ++;\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t\treturn _objectPool[ _objectCount ++ ];\n\n\t\t}\n\n\t\tfunction getNextVertexInPool() {\n\n\t\t\tif ( _vertexCount === _vertexPoolLength ) {\n\n\t\t\t\tvar vertex = new THREE.RenderableVertex();\n\t\t\t\t_vertexPool.push( vertex );\n\t\t\t\t_vertexPoolLength ++;\n\t\t\t\t_vertexCount ++;\n\t\t\t\treturn vertex;\n\n\t\t\t}\n\n\t\t\treturn _vertexPool[ _vertexCount ++ ];\n\n\t\t}\n\n\t\tfunction getNextFaceInPool() {\n\n\t\t\tif ( _faceCount === _facePoolLength ) {\n\n\t\t\t\tvar face = new THREE.RenderableFace();\n\t\t\t\t_facePool.push( face );\n\t\t\t\t_facePoolLength ++;\n\t\t\t\t_faceCount ++;\n\t\t\t\treturn face;\n\n\t\t\t}\n\n\t\t\treturn _facePool[ _faceCount ++ ];\n\n\n\t\t}\n\n\t\tfunction getNextLineInPool() {\n\n\t\t\tif ( _lineCount === _linePoolLength ) {\n\n\t\t\t\tvar line = new THREE.RenderableLine();\n\t\t\t\t_linePool.push( line );\n\t\t\t\t_linePoolLength ++;\n\t\t\t\t_lineCount ++;\n\t\t\t\treturn line;\n\n\t\t\t}\n\n\t\t\treturn _linePool[ _lineCount ++ ];\n\n\t\t}\n\n\t\tfunction getNextSpriteInPool() {\n\n\t\t\tif ( _spriteCount === _spritePoolLength ) {\n\n\t\t\t\tvar sprite = new THREE.RenderableSprite();\n\t\t\t\t_spritePool.push( sprite );\n\t\t\t\t_spritePoolLength ++;\n\t\t\t\t_spriteCount ++;\n\t\t\t\treturn sprite;\n\n\t\t\t}\n\n\t\t\treturn _spritePool[ _spriteCount ++ ];\n\n\t\t}\n\n\t\t//\n\n\t\tfunction painterSort( a, b ) {\n\n\t\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t\t} else if ( a.z !== b.z ) {\n\n\t\t\t\treturn b.z - a.z;\n\n\t\t\t} else if ( a.id !== b.id ) {\n\n\t\t\t\treturn a.id - b.id;\n\n\t\t\t} else {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction clipLine( s1, s2 ) {\n\n\t\t\tvar alpha1 = 0, alpha2 = 1,\n\n\t\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\n\t\t\t// Z = -1 and Z = +1, respectively.\n\t\t\tbc1near =  s1.z + s1.w,\n\t\t\tbc2near =  s2.z + s2.w,\n\t\t\tbc1far =  - s1.z + s1.w,\n\t\t\tbc2far =  - s2.z + s2.w;\n\n\t\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\n\n\t\t\t\t// Both vertices lie entirely within all clip planes.\n\t\t\t\treturn true;\n\n\t\t\t} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\n\n\t\t\t\t// Both vertices lie entirely outside one of the clip planes.\n\t\t\t\treturn false;\n\n\t\t\t} else {\n\n\t\t\t\t// The line segment spans at least one clip plane.\n\n\t\t\t\tif ( bc1near < 0 ) {\n\n\t\t\t\t\t// v1 lies outside the near plane, v2 inside\n\t\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t\t} else if ( bc2near < 0 ) {\n\n\t\t\t\t\t// v2 lies outside the near plane, v1 inside\n\t\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( bc1far < 0 ) {\n\n\t\t\t\t\t// v1 lies outside the far plane, v2 inside\n\t\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t\t} else if ( bc2far < 0 ) {\n\n\t\t\t\t\t// v2 lies outside the far plane, v2 inside\n\t\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( alpha2 < alpha1 ) {\n\n\t\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\n\t\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\n\t\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\n\t\t\t\t\treturn false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\n\t\t\t\t\ts1.lerp( s2, alpha1 );\n\t\t\t\t\ts2.lerp( s1, 1 - alpha2 );\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n};"]},"metadata":{},"sourceType":"script"}