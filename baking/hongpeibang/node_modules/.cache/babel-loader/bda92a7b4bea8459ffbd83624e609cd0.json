{"ast":null,"code":"module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Dot screen shader\n   * based on glfx.js sepia shader\n   * https://github.com/evanw/glfx.js\n   */\n  THREE.DotScreenShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"tSize\": {\n        type: \"v2\",\n        value: new THREE.Vector2(256, 256)\n      },\n      \"center\": {\n        type: \"v2\",\n        value: new THREE.Vector2(0.5, 0.5)\n      },\n      \"angle\": {\n        type: \"f\",\n        value: 1.57\n      },\n      \"scale\": {\n        type: \"f\",\n        value: 1.0\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform vec2 center;\", \"uniform float angle;\", \"uniform float scale;\", \"uniform vec2 tSize;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"float pattern() {\", \"float s = sin( angle ), c = cos( angle );\", \"vec2 tex = vUv * tSize - center;\", \"vec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\", \"return ( sin( point.x ) * sin( point.y ) ) * 4.0;\", \"}\", \"void main() {\", \"vec4 color = texture2D( tDiffuse, vUv );\", \"float average = ( color.r + color.g + color.b ) / 3.0;\", \"gl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\", \"}\"].join(\"\\n\")\n  };\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/DotScreenShader.js"],"names":["module","exports","THREE","DotScreenShader","uniforms","type","value","Vector2","vertexShader","join","fragmentShader"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AACjC;;;;;;;AAQAA,EAAAA,KAAK,CAACC,eAAN,GAAwB;AAEvBC,IAAAA,QAAQ,EAAE;AAET,kBAAY;AAAEC,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAFH;AAGT,eAAY;AAAED,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,KAAK,EAAE,IAAIJ,KAAK,CAACK,OAAV,CAAmB,GAAnB,EAAwB,GAAxB;AAArB,OAHH;AAIT,gBAAY;AAAEF,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,KAAK,EAAE,IAAIJ,KAAK,CAACK,OAAV,CAAmB,GAAnB,EAAwB,GAAxB;AAArB,OAJH;AAKT,eAAY;AAAEF,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB,OALH;AAMT,eAAY;AAAED,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB;AANH,KAFa;AAYvBE,IAAAA,YAAY,EAAE,CAEb,mBAFa,EAIb,eAJa,EAMZ,WANY,EAOZ,2EAPY,EASb,GATa,EAWZC,IAXY,CAWN,IAXM,CAZS;AAyBvBC,IAAAA,cAAc,EAAE,CAEf,sBAFe,EAGf,sBAHe,EAIf,sBAJe,EAKf,qBALe,EAOf,6BAPe,EASf,mBATe,EAWf,mBAXe,EAad,2CAbc,EAed,kCAfc,EAgBd,4EAhBc,EAkBd,mDAlBc,EAoBf,GApBe,EAsBf,eAtBe,EAwBd,0CAxBc,EA0Bd,wDA1Bc,EA4Bd,2EA5Bc,EA8Bf,GA9Be,EAgCdD,IAhCc,CAgCR,IAhCQ;AAzBO,GAAxB;AA6DA,CAtED","sourcesContent":["module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Dot screen shader\n\t * based on glfx.js sepia shader\n\t * https://github.com/evanw/glfx.js\n\t */\n\n\tTHREE.DotScreenShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"tSize\":    { type: \"v2\", value: new THREE.Vector2( 256, 256 ) },\n\t\t\t\"center\":   { type: \"v2\", value: new THREE.Vector2( 0.5, 0.5 ) },\n\t\t\t\"angle\":    { type: \"f\", value: 1.57 },\n\t\t\t\"scale\":    { type: \"f\", value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec2 center;\",\n\t\t\t\"uniform float angle;\",\n\t\t\t\"uniform float scale;\",\n\t\t\t\"uniform vec2 tSize;\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"float pattern() {\",\n\n\t\t\t\t\"float s = sin( angle ), c = cos( angle );\",\n\n\t\t\t\t\"vec2 tex = vUv * tSize - center;\",\n\t\t\t\t\"vec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\",\n\n\t\t\t\t\"return ( sin( point.x ) * sin( point.y ) ) * 4.0;\",\n\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 color = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\t\"float average = ( color.r + color.g + color.b ) / 3.0;\",\n\n\t\t\t\t\"gl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n"]},"metadata":{},"sourceType":"script"}