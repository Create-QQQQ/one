{"ast":null,"code":"module.exports = function (THREE) {\n  /**\n   * @author felixturner / http://airtight.cc/\n   *\n   * Mirror Shader\n   * Copies half the input to the other half\n   *\n   * side: side of input to mirror (0 = left, 1 = right, 2 = top, 3 = bottom)\n   */\n  THREE.MirrorShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"side\": {\n        type: \"i\",\n        value: 1\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform int side;\", \"varying vec2 vUv;\", \"void main() {\", \"vec2 p = vUv;\", \"if (side == 0){\", \"if (p.x > 0.5) p.x = 1.0 - p.x;\", \"}else if (side == 1){\", \"if (p.x < 0.5) p.x = 1.0 - p.x;\", \"}else if (side == 2){\", \"if (p.y < 0.5) p.y = 1.0 - p.y;\", \"}else if (side == 3){\", \"if (p.y > 0.5) p.y = 1.0 - p.y;\", \"} \", \"vec4 color = texture2D(tDiffuse, p);\", \"gl_FragColor = color;\", \"}\"].join(\"\\n\")\n  };\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/MirrorShader.js"],"names":["module","exports","THREE","MirrorShader","uniforms","type","value","vertexShader","join","fragmentShader"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AACjC;;;;;;;;AASAA,EAAAA,KAAK,CAACC,YAAN,GAAqB;AAEpBC,IAAAA,QAAQ,EAAE;AAET,kBAAY;AAAEC,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAFH;AAGT,cAAY;AAAED,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB;AAHH,KAFU;AASpBC,IAAAA,YAAY,EAAE,CAEb,mBAFa,EAIb,eAJa,EAMZ,WANY,EAOZ,2EAPY,EASb,GATa,EAWZC,IAXY,CAWN,IAXM,CATM;AAsBpBC,IAAAA,cAAc,EAAE,CAEf,6BAFe,EAGf,mBAHe,EAKf,mBALe,EAOf,eAPe,EASd,eATc,EAUd,iBAVc,EAWb,iCAXa,EAYd,uBAZc,EAab,iCAba,EAcd,uBAdc,EAeb,iCAfa,EAgBd,uBAhBc,EAiBb,iCAjBa,EAkBd,IAlBc,EAmBd,sCAnBc,EAoBd,uBApBc,EAsBf,GAtBe,EAwBdD,IAxBc,CAwBR,IAxBQ;AAtBI,GAArB;AAkDA,CA5DD","sourcesContent":["module.exports = function( THREE ){\n\t/**\n\t * @author felixturner / http://airtight.cc/\n\t *\n\t * Mirror Shader\n\t * Copies half the input to the other half\n\t *\n\t * side: side of input to mirror (0 = left, 1 = right, 2 = top, 3 = bottom)\n\t */\n\n\tTHREE.MirrorShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"side\":     { type: \"i\", value: 1 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform int side;\",\n\t\t\t\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec2 p = vUv;\",\n\t\t\t\t\"if (side == 0){\",\n\t\t\t\t\t\"if (p.x > 0.5) p.x = 1.0 - p.x;\",\n\t\t\t\t\"}else if (side == 1){\",\n\t\t\t\t\t\"if (p.x < 0.5) p.x = 1.0 - p.x;\",\n\t\t\t\t\"}else if (side == 2){\",\n\t\t\t\t\t\"if (p.y < 0.5) p.y = 1.0 - p.y;\",\n\t\t\t\t\"}else if (side == 3){\",\n\t\t\t\t\t\"if (p.y > 0.5) p.y = 1.0 - p.y;\",\n\t\t\t\t\"} \",\n\t\t\t\t\"vec4 color = texture2D(tDiffuse, p);\",\n\t\t\t\t\"gl_FragColor = color;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n"]},"metadata":{},"sourceType":"script"}