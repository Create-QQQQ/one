{"ast":null,"code":"module.exports = function (THREE) {\n  /*\n   * @author mrdoob / http://mrdoob.com/\n   */\n  THREE.DDSLoader = function () {\n    this._parser = THREE.DDSLoader.parse;\n  };\n\n  THREE.DDSLoader.prototype = Object.create(THREE.CompressedTextureLoader.prototype);\n  THREE.DDSLoader.prototype.constructor = THREE.DDSLoader;\n\n  THREE.DDSLoader.parse = function (buffer, loadMipmaps) {\n    var dds = {\n      mipmaps: [],\n      width: 0,\n      height: 0,\n      format: null,\n      mipmapCount: 1\n    }; // Adapted from @toji's DDS utils\n    // https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\n    // All values and structures referenced from:\n    // http://msdn.microsoft.com/en-us/library/bb943991.aspx/\n\n    var DDS_MAGIC = 0x20534444;\n    var DDSD_CAPS = 0x1,\n        DDSD_HEIGHT = 0x2,\n        DDSD_WIDTH = 0x4,\n        DDSD_PITCH = 0x8,\n        DDSD_PIXELFORMAT = 0x1000,\n        DDSD_MIPMAPCOUNT = 0x20000,\n        DDSD_LINEARSIZE = 0x80000,\n        DDSD_DEPTH = 0x800000;\n    var DDSCAPS_COMPLEX = 0x8,\n        DDSCAPS_MIPMAP = 0x400000,\n        DDSCAPS_TEXTURE = 0x1000;\n    var DDSCAPS2_CUBEMAP = 0x200,\n        DDSCAPS2_CUBEMAP_POSITIVEX = 0x400,\n        DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,\n        DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,\n        DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,\n        DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,\n        DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,\n        DDSCAPS2_VOLUME = 0x200000;\n    var DDPF_ALPHAPIXELS = 0x1,\n        DDPF_ALPHA = 0x2,\n        DDPF_FOURCC = 0x4,\n        DDPF_RGB = 0x40,\n        DDPF_YUV = 0x200,\n        DDPF_LUMINANCE = 0x20000;\n\n    function fourCCToInt32(value) {\n      return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\n    }\n\n    function int32ToFourCC(value) {\n      return String.fromCharCode(value & 0xff, value >> 8 & 0xff, value >> 16 & 0xff, value >> 24 & 0xff);\n    }\n\n    function loadARGBMip(buffer, dataOffset, width, height) {\n      var dataLength = width * height * 4;\n      var srcBuffer = new Uint8Array(buffer, dataOffset, dataLength);\n      var byteArray = new Uint8Array(dataLength);\n      var dst = 0;\n      var src = 0;\n\n      for (var y = 0; y < height; y++) {\n        for (var x = 0; x < width; x++) {\n          var b = srcBuffer[src];\n          src++;\n          var g = srcBuffer[src];\n          src++;\n          var r = srcBuffer[src];\n          src++;\n          var a = srcBuffer[src];\n          src++;\n          byteArray[dst] = r;\n          dst++; //r\n\n          byteArray[dst] = g;\n          dst++; //g\n\n          byteArray[dst] = b;\n          dst++; //b\n\n          byteArray[dst] = a;\n          dst++; //a\n        }\n      }\n\n      return byteArray;\n    }\n\n    var FOURCC_DXT1 = fourCCToInt32(\"DXT1\");\n    var FOURCC_DXT3 = fourCCToInt32(\"DXT3\");\n    var FOURCC_DXT5 = fourCCToInt32(\"DXT5\");\n    var FOURCC_ETC1 = fourCCToInt32(\"ETC1\");\n    var headerLengthInt = 31; // The header length in 32 bit ints\n    // Offsets into the header array\n\n    var off_magic = 0;\n    var off_size = 1;\n    var off_flags = 2;\n    var off_height = 3;\n    var off_width = 4;\n    var off_mipmapCount = 7;\n    var off_pfFlags = 20;\n    var off_pfFourCC = 21;\n    var off_RGBBitCount = 22;\n    var off_RBitMask = 23;\n    var off_GBitMask = 24;\n    var off_BBitMask = 25;\n    var off_ABitMask = 26;\n    var off_caps = 27;\n    var off_caps2 = 28;\n    var off_caps3 = 29;\n    var off_caps4 = 30; // Parse header\n\n    var header = new Int32Array(buffer, 0, headerLengthInt);\n\n    if (header[off_magic] !== DDS_MAGIC) {\n      console.error('THREE.DDSLoader.parse: Invalid magic number in DDS header.');\n      return dds;\n    }\n\n    if (!header[off_pfFlags] & DDPF_FOURCC) {\n      console.error('THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.');\n      return dds;\n    }\n\n    var blockBytes;\n    var fourCC = header[off_pfFourCC];\n    var isRGBAUncompressed = false;\n\n    switch (fourCC) {\n      case FOURCC_DXT1:\n        blockBytes = 8;\n        dds.format = THREE.RGB_S3TC_DXT1_Format;\n        break;\n\n      case FOURCC_DXT3:\n        blockBytes = 16;\n        dds.format = THREE.RGBA_S3TC_DXT3_Format;\n        break;\n\n      case FOURCC_DXT5:\n        blockBytes = 16;\n        dds.format = THREE.RGBA_S3TC_DXT5_Format;\n        break;\n\n      case FOURCC_ETC1:\n        blockBytes = 8;\n        dds.format = THREE.RGB_ETC1_Format;\n        break;\n\n      default:\n        if (header[off_RGBBitCount] === 32 && header[off_RBitMask] & 0xff0000 && header[off_GBitMask] & 0xff00 && header[off_BBitMask] & 0xff && header[off_ABitMask] & 0xff000000) {\n          isRGBAUncompressed = true;\n          blockBytes = 64;\n          dds.format = THREE.RGBAFormat;\n        } else {\n          console.error('THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC(fourCC));\n          return dds;\n        }\n\n    }\n\n    dds.mipmapCount = 1;\n\n    if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {\n      dds.mipmapCount = Math.max(1, header[off_mipmapCount]);\n    }\n\n    var caps2 = header[off_caps2];\n    dds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\n\n    if (dds.isCubemap && (!(caps2 & DDSCAPS2_CUBEMAP_POSITIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ))) {\n      console.error('THREE.DDSLoader.parse: Incomplete cubemap faces');\n      return dds;\n    }\n\n    dds.width = header[off_width];\n    dds.height = header[off_height];\n    var dataOffset = header[off_size] + 4; // Extract mipmaps buffers\n\n    var faces = dds.isCubemap ? 6 : 1;\n\n    for (var face = 0; face < faces; face++) {\n      var width = dds.width;\n      var height = dds.height;\n\n      for (var i = 0; i < dds.mipmapCount; i++) {\n        if (isRGBAUncompressed) {\n          var byteArray = loadARGBMip(buffer, dataOffset, width, height);\n          var dataLength = byteArray.length;\n        } else {\n          var dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;\n          var byteArray = new Uint8Array(buffer, dataOffset, dataLength);\n        }\n\n        var mipmap = {\n          \"data\": byteArray,\n          \"width\": width,\n          \"height\": height\n        };\n        dds.mipmaps.push(mipmap);\n        dataOffset += dataLength;\n        width = Math.max(width >> 1, 1);\n        height = Math.max(height >> 1, 1);\n      }\n    }\n\n    return dds;\n  };\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/DDSLoader.js"],"names":["module","exports","THREE","DDSLoader","_parser","parse","prototype","Object","create","CompressedTextureLoader","constructor","buffer","loadMipmaps","dds","mipmaps","width","height","format","mipmapCount","DDS_MAGIC","DDSD_CAPS","DDSD_HEIGHT","DDSD_WIDTH","DDSD_PITCH","DDSD_PIXELFORMAT","DDSD_MIPMAPCOUNT","DDSD_LINEARSIZE","DDSD_DEPTH","DDSCAPS_COMPLEX","DDSCAPS_MIPMAP","DDSCAPS_TEXTURE","DDSCAPS2_CUBEMAP","DDSCAPS2_CUBEMAP_POSITIVEX","DDSCAPS2_CUBEMAP_NEGATIVEX","DDSCAPS2_CUBEMAP_POSITIVEY","DDSCAPS2_CUBEMAP_NEGATIVEY","DDSCAPS2_CUBEMAP_POSITIVEZ","DDSCAPS2_CUBEMAP_NEGATIVEZ","DDSCAPS2_VOLUME","DDPF_ALPHAPIXELS","DDPF_ALPHA","DDPF_FOURCC","DDPF_RGB","DDPF_YUV","DDPF_LUMINANCE","fourCCToInt32","value","charCodeAt","int32ToFourCC","String","fromCharCode","loadARGBMip","dataOffset","dataLength","srcBuffer","Uint8Array","byteArray","dst","src","y","x","b","g","r","a","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","FOURCC_ETC1","headerLengthInt","off_magic","off_size","off_flags","off_height","off_width","off_mipmapCount","off_pfFlags","off_pfFourCC","off_RGBBitCount","off_RBitMask","off_GBitMask","off_BBitMask","off_ABitMask","off_caps","off_caps2","off_caps3","off_caps4","header","Int32Array","console","error","blockBytes","fourCC","isRGBAUncompressed","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGBAFormat","Math","max","caps2","isCubemap","faces","face","i","length","mipmap","push"],"mappings":"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","sourcesContent":["module.exports = function( THREE ){\n\n\t/*\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.DDSLoader = function () {\n\n\t\tthis._parser = THREE.DDSLoader.parse;\n\n\t};\n\n\tTHREE.DDSLoader.prototype = Object.create( THREE.CompressedTextureLoader.prototype );\n\tTHREE.DDSLoader.prototype.constructor = THREE.DDSLoader;\n\n\tTHREE.DDSLoader.parse = function ( buffer, loadMipmaps ) {\n\n\t\tvar dds = { mipmaps: [], width: 0, height: 0, format: null, mipmapCount: 1 };\n\n\t\t// Adapted from @toji's DDS utils\n\t\t// https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\n\n\t\t// All values and structures referenced from:\n\t\t// http://msdn.microsoft.com/en-us/library/bb943991.aspx/\n\n\t\tvar DDS_MAGIC = 0x20534444;\n\n\t\tvar DDSD_CAPS = 0x1,\n\t\t\tDDSD_HEIGHT = 0x2,\n\t\t\tDDSD_WIDTH = 0x4,\n\t\t\tDDSD_PITCH = 0x8,\n\t\t\tDDSD_PIXELFORMAT = 0x1000,\n\t\t\tDDSD_MIPMAPCOUNT = 0x20000,\n\t\t\tDDSD_LINEARSIZE = 0x80000,\n\t\t\tDDSD_DEPTH = 0x800000;\n\n\t\tvar DDSCAPS_COMPLEX = 0x8,\n\t\t\tDDSCAPS_MIPMAP = 0x400000,\n\t\t\tDDSCAPS_TEXTURE = 0x1000;\n\n\t\tvar DDSCAPS2_CUBEMAP = 0x200,\n\t\t\tDDSCAPS2_CUBEMAP_POSITIVEX = 0x400,\n\t\t\tDDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,\n\t\t\tDDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,\n\t\t\tDDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,\n\t\t\tDDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,\n\t\t\tDDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,\n\t\t\tDDSCAPS2_VOLUME = 0x200000;\n\n\t\tvar DDPF_ALPHAPIXELS = 0x1,\n\t\t\tDDPF_ALPHA = 0x2,\n\t\t\tDDPF_FOURCC = 0x4,\n\t\t\tDDPF_RGB = 0x40,\n\t\t\tDDPF_YUV = 0x200,\n\t\t\tDDPF_LUMINANCE = 0x20000;\n\n\t\tfunction fourCCToInt32( value ) {\n\n\t\t\treturn value.charCodeAt( 0 ) +\n\t\t\t\t( value.charCodeAt( 1 ) << 8 ) +\n\t\t\t\t( value.charCodeAt( 2 ) << 16 ) +\n\t\t\t\t( value.charCodeAt( 3 ) << 24 );\n\n\t\t}\n\n\t\tfunction int32ToFourCC( value ) {\n\n\t\t\treturn String.fromCharCode(\n\t\t\t\tvalue & 0xff,\n\t\t\t\t( value >> 8 ) & 0xff,\n\t\t\t\t( value >> 16 ) & 0xff,\n\t\t\t\t( value >> 24 ) & 0xff\n\t\t\t);\n\n\t\t}\n\n\t\tfunction loadARGBMip( buffer, dataOffset, width, height ) {\n\n\t\t\tvar dataLength = width * height * 4;\n\t\t\tvar srcBuffer = new Uint8Array( buffer, dataOffset, dataLength );\n\t\t\tvar byteArray = new Uint8Array( dataLength );\n\t\t\tvar dst = 0;\n\t\t\tvar src = 0;\n\t\t\tfor ( var y = 0; y < height; y ++ ) {\n\n\t\t\t\tfor ( var x = 0; x < width; x ++ ) {\n\n\t\t\t\t\tvar b = srcBuffer[ src ]; src ++;\n\t\t\t\t\tvar g = srcBuffer[ src ]; src ++;\n\t\t\t\t\tvar r = srcBuffer[ src ]; src ++;\n\t\t\t\t\tvar a = srcBuffer[ src ]; src ++;\n\t\t\t\t\tbyteArray[ dst ] = r; dst ++;\t//r\n\t\t\t\t\tbyteArray[ dst ] = g; dst ++;\t//g\n\t\t\t\t\tbyteArray[ dst ] = b; dst ++;\t//b\n\t\t\t\t\tbyteArray[ dst ] = a; dst ++;\t//a\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\treturn byteArray;\n\n\t\t}\n\n\t\tvar FOURCC_DXT1 = fourCCToInt32( \"DXT1\" );\n\t\tvar FOURCC_DXT3 = fourCCToInt32( \"DXT3\" );\n\t\tvar FOURCC_DXT5 = fourCCToInt32( \"DXT5\" );\n\t\tvar FOURCC_ETC1 = fourCCToInt32( \"ETC1\" );\n\n\t\tvar headerLengthInt = 31; // The header length in 32 bit ints\n\n\t\t// Offsets into the header array\n\n\t\tvar off_magic = 0;\n\n\t\tvar off_size = 1;\n\t\tvar off_flags = 2;\n\t\tvar off_height = 3;\n\t\tvar off_width = 4;\n\n\t\tvar off_mipmapCount = 7;\n\n\t\tvar off_pfFlags = 20;\n\t\tvar off_pfFourCC = 21;\n\t\tvar off_RGBBitCount = 22;\n\t\tvar off_RBitMask = 23;\n\t\tvar off_GBitMask = 24;\n\t\tvar off_BBitMask = 25;\n\t\tvar off_ABitMask = 26;\n\n\t\tvar off_caps = 27;\n\t\tvar off_caps2 = 28;\n\t\tvar off_caps3 = 29;\n\t\tvar off_caps4 = 30;\n\n\t\t// Parse header\n\n\t\tvar header = new Int32Array( buffer, 0, headerLengthInt );\n\n\t\tif ( header[ off_magic ] !== DDS_MAGIC ) {\n\n\t\t\tconsole.error( 'THREE.DDSLoader.parse: Invalid magic number in DDS header.' );\n\t\t\treturn dds;\n\n\t\t}\n\n\t\tif ( ! header[ off_pfFlags ] & DDPF_FOURCC ) {\n\n\t\t\tconsole.error( 'THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.' );\n\t\t\treturn dds;\n\n\t\t}\n\n\t\tvar blockBytes;\n\n\t\tvar fourCC = header[ off_pfFourCC ];\n\n\t\tvar isRGBAUncompressed = false;\n\n\t\tswitch ( fourCC ) {\n\n\t\t\tcase FOURCC_DXT1:\n\n\t\t\t\tblockBytes = 8;\n\t\t\t\tdds.format = THREE.RGB_S3TC_DXT1_Format;\n\t\t\t\tbreak;\n\n\t\t\tcase FOURCC_DXT3:\n\n\t\t\t\tblockBytes = 16;\n\t\t\t\tdds.format = THREE.RGBA_S3TC_DXT3_Format;\n\t\t\t\tbreak;\n\n\t\t\tcase FOURCC_DXT5:\n\n\t\t\t\tblockBytes = 16;\n\t\t\t\tdds.format = THREE.RGBA_S3TC_DXT5_Format;\n\t\t\t\tbreak;\n\n\t\t\tcase FOURCC_ETC1:\n\n\t\t\t\tblockBytes = 8;\n\t\t\t\tdds.format = THREE.RGB_ETC1_Format;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tif ( header[ off_RGBBitCount ] === 32\n\t\t\t\t\t&& header[ off_RBitMask ] & 0xff0000\n\t\t\t\t\t&& header[ off_GBitMask ] & 0xff00\n\t\t\t\t\t&& header[ off_BBitMask ] & 0xff\n\t\t\t\t\t&& header[ off_ABitMask ] & 0xff000000  ) {\n\n\t\t\t\t\tisRGBAUncompressed = true;\n\t\t\t\t\tblockBytes = 64;\n\t\t\t\t\tdds.format = THREE.RGBAFormat;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC( fourCC ) );\n\t\t\t\t\treturn dds;\n\n\t\t\t\t}\n\t\t}\n\n\t\tdds.mipmapCount = 1;\n\n\t\tif ( header[ off_flags ] & DDSD_MIPMAPCOUNT && loadMipmaps !== false ) {\n\n\t\t\tdds.mipmapCount = Math.max( 1, header[ off_mipmapCount ] );\n\n\t\t}\n\n\t\tvar caps2 = header[ off_caps2 ];\n\t\tdds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\n\t\tif ( dds.isCubemap && (\n\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_POSITIVEX ) ||\n\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX ) ||\n\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_POSITIVEY ) ||\n\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY ) ||\n\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ ) ||\n\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ )\n\t\t\t) ) {\n\n\t\t\tconsole.error( 'THREE.DDSLoader.parse: Incomplete cubemap faces' );\n\t\t\treturn dds;\n\n\t\t}\n\n\t\tdds.width = header[ off_width ];\n\t\tdds.height = header[ off_height ];\n\n\t\tvar dataOffset = header[ off_size ] + 4;\n\n\t\t// Extract mipmaps buffers\n\n\t\tvar faces = dds.isCubemap ? 6 : 1;\n\n\t\tfor ( var face = 0; face < faces; face ++ ) {\n\n\t\t\tvar width = dds.width;\n\t\t\tvar height = dds.height;\n\n\t\t\tfor ( var i = 0; i < dds.mipmapCount; i ++ ) {\n\n\t\t\t\tif ( isRGBAUncompressed ) {\n\n\t\t\t\t\tvar byteArray = loadARGBMip( buffer, dataOffset, width, height );\n\t\t\t\t\tvar dataLength = byteArray.length;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar dataLength = Math.max( 4, width ) / 4 * Math.max( 4, height ) / 4 * blockBytes;\n\t\t\t\t\tvar byteArray = new Uint8Array( buffer, dataOffset, dataLength );\n\n\t\t\t\t}\n\n\t\t\t\tvar mipmap = { \"data\": byteArray, \"width\": width, \"height\": height };\n\t\t\t\tdds.mipmaps.push( mipmap );\n\n\t\t\t\tdataOffset += dataLength;\n\n\t\t\t\twidth = Math.max( width >> 1, 1 );\n\t\t\t\theight = Math.max( height >> 1, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn dds;\n\n\t};\n\n};"]},"metadata":{},"sourceType":"script"}