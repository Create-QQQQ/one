{"ast":null,"code":"module.exports = function (THREE) {\n  /**\n   * @author tapio / http://tapio.github.com/\n   *\n   * Hue and saturation adjustment\n   * https://github.com/evanw/glfx.js\n   * hue: -1 to 1 (-1 is 180 degrees in the negative direction, 0 is no change, etc.\n   * saturation: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\n   */\n  THREE.HueSaturationShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"hue\": {\n        type: \"f\",\n        value: 0\n      },\n      \"saturation\": {\n        type: \"f\",\n        value: 0\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float hue;\", \"uniform float saturation;\", \"varying vec2 vUv;\", \"void main() {\", \"gl_FragColor = texture2D( tDiffuse, vUv );\", // hue\n    \"float angle = hue * 3.14159265;\", \"float s = sin(angle), c = cos(angle);\", \"vec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\", \"float len = length(gl_FragColor.rgb);\", \"gl_FragColor.rgb = vec3(\", \"dot(gl_FragColor.rgb, weights.xyz),\", \"dot(gl_FragColor.rgb, weights.zxy),\", \"dot(gl_FragColor.rgb, weights.yzx)\", \");\", // saturation\n    \"float average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;\", \"if (saturation > 0.0) {\", \"gl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));\", \"} else {\", \"gl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);\", \"}\", \"}\"].join(\"\\n\")\n  };\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/HueSaturationShader.js"],"names":["module","exports","THREE","HueSaturationShader","uniforms","type","value","vertexShader","join","fragmentShader"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AACjC;;;;;;;;AASAA,EAAAA,KAAK,CAACC,mBAAN,GAA4B;AAE3BC,IAAAA,QAAQ,EAAE;AAET,kBAAc;AAAEC,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAFL;AAGT,aAAc;AAAED,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAHL;AAIT,oBAAc;AAAED,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,KAAK,EAAE;AAApB;AAJL,KAFiB;AAU3BC,IAAAA,YAAY,EAAE,CAEb,mBAFa,EAIb,eAJa,EAMZ,WANY,EAQZ,2EARY,EAUb,GAVa,EAYZC,IAZY,CAYN,IAZM,CAVa;AAwB3BC,IAAAA,cAAc,EAAE,CAEf,6BAFe,EAGf,oBAHe,EAIf,2BAJe,EAMf,mBANe,EAQf,eARe,EAUd,4CAVc,EAYd;AACA,qCAbc,EAcd,uCAdc,EAed,oFAfc,EAgBd,uCAhBc,EAiBd,0BAjBc,EAkBb,qCAlBa,EAmBb,qCAnBa,EAoBb,oCApBa,EAqBd,IArBc,EAuBd;AACA,+EAxBc,EAyBd,yBAzBc,EA0Bb,wFA1Ba,EA2Bd,UA3Bc,EA4Bb,mEA5Ba,EA6Bd,GA7Bc,EA+Bf,GA/Be,EAiCdD,IAjCc,CAiCR,IAjCQ;AAxBW,GAA5B;AA6DA,CAvED","sourcesContent":["module.exports = function( THREE ){\n\t/**\n\t * @author tapio / http://tapio.github.com/\n\t *\n\t * Hue and saturation adjustment\n\t * https://github.com/evanw/glfx.js\n\t * hue: -1 to 1 (-1 is 180 degrees in the negative direction, 0 is no change, etc.\n\t * saturation: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\n\t */\n\n\tTHREE.HueSaturationShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\":   { type: \"t\", value: null },\n\t\t\t\"hue\":        { type: \"f\", value: 0 },\n\t\t\t\"saturation\": { type: \"f\", value: 0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform float hue;\",\n\t\t\t\"uniform float saturation;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"gl_FragColor = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\t// hue\n\t\t\t\t\"float angle = hue * 3.14159265;\",\n\t\t\t\t\"float s = sin(angle), c = cos(angle);\",\n\t\t\t\t\"vec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\",\n\t\t\t\t\"float len = length(gl_FragColor.rgb);\",\n\t\t\t\t\"gl_FragColor.rgb = vec3(\",\n\t\t\t\t\t\"dot(gl_FragColor.rgb, weights.xyz),\",\n\t\t\t\t\t\"dot(gl_FragColor.rgb, weights.zxy),\",\n\t\t\t\t\t\"dot(gl_FragColor.rgb, weights.yzx)\",\n\t\t\t\t\");\",\n\n\t\t\t\t// saturation\n\t\t\t\t\"float average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;\",\n\t\t\t\t\"if (saturation > 0.0) {\",\n\t\t\t\t\t\"gl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));\",\n\t\t\t\t\"} else {\",\n\t\t\t\t\t\"gl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);\",\n\t\t\t\t\"}\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n"]},"metadata":{},"sourceType":"script"}