{"ast":null,"code":"module.exports = function (THREE) {\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n  THREE.SpriteCanvasMaterial = function (parameters) {\n    THREE.Material.call(this);\n    this.type = 'SpriteCanvasMaterial';\n    this.color = new THREE.Color(0xffffff);\n\n    this.program = function (context, color) {};\n\n    this.setValues(parameters);\n  };\n\n  THREE.SpriteCanvasMaterial.prototype = Object.create(THREE.Material.prototype);\n  THREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n\n  THREE.SpriteCanvasMaterial.prototype.clone = function () {\n    var material = new THREE.SpriteCanvasMaterial();\n    material.copy(this);\n    material.color.copy(this.color);\n    material.program = this.program;\n    return material;\n  }; //\n\n\n  THREE.CanvasRenderer = function (parameters) {\n    console.log('THREE.CanvasRenderer', THREE.REVISION);\n    parameters = parameters || {};\n\n    var _this = this,\n        _renderData,\n        _elements,\n        _lights,\n        _projector = new THREE.Projector(),\n        _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement('canvas'),\n        _canvasWidth = _canvas.width,\n        _canvasHeight = _canvas.height,\n        _canvasWidthHalf = Math.floor(_canvasWidth / 2),\n        _canvasHeightHalf = Math.floor(_canvasHeight / 2),\n        _viewportX = 0,\n        _viewportY = 0,\n        _viewportWidth = _canvasWidth,\n        _viewportHeight = _canvasHeight,\n        _pixelRatio = 1,\n        _context = _canvas.getContext('2d', {\n      alpha: parameters.alpha === true\n    }),\n        _clearColor = new THREE.Color(0x000000),\n        _clearAlpha = parameters.alpha === true ? 0 : 1,\n        _contextGlobalAlpha = 1,\n        _contextGlobalCompositeOperation = 0,\n        _contextStrokeStyle = null,\n        _contextFillStyle = null,\n        _contextLineWidth = null,\n        _contextLineCap = null,\n        _contextLineJoin = null,\n        _contextLineDash = [],\n        _camera,\n        _v1,\n        _v2,\n        _v3,\n        _v4,\n        _v5 = new THREE.RenderableVertex(),\n        _v6 = new THREE.RenderableVertex(),\n        _v1x,\n        _v1y,\n        _v2x,\n        _v2y,\n        _v3x,\n        _v3y,\n        _v4x,\n        _v4y,\n        _v5x,\n        _v5y,\n        _v6x,\n        _v6y,\n        _color = new THREE.Color(),\n        _color1 = new THREE.Color(),\n        _color2 = new THREE.Color(),\n        _color3 = new THREE.Color(),\n        _color4 = new THREE.Color(),\n        _diffuseColor = new THREE.Color(),\n        _emissiveColor = new THREE.Color(),\n        _lightColor = new THREE.Color(),\n        _patterns = {},\n        _image,\n        _uvs,\n        _uv1x,\n        _uv1y,\n        _uv2x,\n        _uv2y,\n        _uv3x,\n        _uv3y,\n        _clipBox = new THREE.Box2(),\n        _clearBox = new THREE.Box2(),\n        _elemBox = new THREE.Box2(),\n        _ambientLight = new THREE.Color(),\n        _directionalLights = new THREE.Color(),\n        _pointLights = new THREE.Color(),\n        _vector3 = new THREE.Vector3(),\n        // Needed for PointLight\n    _centroid = new THREE.Vector3(),\n        _normal = new THREE.Vector3(),\n        _normalViewMatrix = new THREE.Matrix3();\n    /* TODO\n    _canvas.mozImageSmoothingEnabled = false;\n    _canvas.webkitImageSmoothingEnabled = false;\n    _canvas.msImageSmoothingEnabled = false;\n    _canvas.imageSmoothingEnabled = false;\n    */\n    // dash+gap fallbacks for Firefox and everything else\n\n\n    if (_context.setLineDash === undefined) {\n      _context.setLineDash = function () {};\n    }\n\n    this.domElement = _canvas;\n    this.autoClear = true;\n    this.sortObjects = true;\n    this.sortElements = true;\n    this.info = {\n      render: {\n        vertices: 0,\n        faces: 0\n      }\n    }; // WebGLRenderer compatibility\n\n    this.supportsVertexTextures = function () {};\n\n    this.setFaceCulling = function () {}; // API\n\n\n    this.getContext = function () {\n      return _context;\n    };\n\n    this.getContextAttributes = function () {\n      return _context.getContextAttributes();\n    };\n\n    this.getPixelRatio = function () {\n      return _pixelRatio;\n    };\n\n    this.setPixelRatio = function (value) {\n      if (value !== undefined) _pixelRatio = value;\n    };\n\n    this.setSize = function (width, height, updateStyle) {\n      _canvasWidth = width * _pixelRatio;\n      _canvasHeight = height * _pixelRatio;\n      _canvas.width = _canvasWidth;\n      _canvas.height = _canvasHeight;\n      _canvasWidthHalf = Math.floor(_canvasWidth / 2);\n      _canvasHeightHalf = Math.floor(_canvasHeight / 2);\n\n      if (updateStyle !== false) {\n        _canvas.style.width = width + 'px';\n        _canvas.style.height = height + 'px';\n      }\n\n      _clipBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\n      _clipBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\n      _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\n      _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\n      _contextGlobalAlpha = 1;\n      _contextGlobalCompositeOperation = 0;\n      _contextStrokeStyle = null;\n      _contextFillStyle = null;\n      _contextLineWidth = null;\n      _contextLineCap = null;\n      _contextLineJoin = null;\n      this.setViewport(0, 0, width, height);\n    };\n\n    this.setViewport = function (x, y, width, height) {\n      _viewportX = x * _pixelRatio;\n      _viewportY = y * _pixelRatio;\n      _viewportWidth = width * _pixelRatio;\n      _viewportHeight = height * _pixelRatio;\n    };\n\n    this.setScissor = function () {};\n\n    this.setScissorTest = function () {};\n\n    this.setClearColor = function (color, alpha) {\n      _clearColor.set(color);\n\n      _clearAlpha = alpha !== undefined ? alpha : 1;\n\n      _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\n      _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n    };\n\n    this.setClearColorHex = function (hex, alpha) {\n      console.warn('THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.');\n      this.setClearColor(hex, alpha);\n    };\n\n    this.getClearColor = function () {\n      return _clearColor;\n    };\n\n    this.getClearAlpha = function () {\n      return _clearAlpha;\n    };\n\n    this.getMaxAnisotropy = function () {\n      return 0;\n    };\n\n    this.clear = function () {\n      if (_clearBox.isEmpty() === false) {\n        _clearBox.intersect(_clipBox);\n\n        _clearBox.expandByScalar(2);\n\n        _clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n        _clearBox.min.y = -_clearBox.min.y + _canvasHeightHalf; // higher y value !\n\n        _clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n        _clearBox.max.y = -_clearBox.max.y + _canvasHeightHalf; // lower y value !\n\n        if (_clearAlpha < 1) {\n          _context.clearRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n        }\n\n        if (_clearAlpha > 0) {\n          setBlending(THREE.NormalBlending);\n          setOpacity(1);\n          setFillStyle('rgba(' + Math.floor(_clearColor.r * 255) + ',' + Math.floor(_clearColor.g * 255) + ',' + Math.floor(_clearColor.b * 255) + ',' + _clearAlpha + ')');\n\n          _context.fillRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n        }\n\n        _clearBox.makeEmpty();\n      }\n    }; // compatibility\n\n\n    this.clearColor = function () {};\n\n    this.clearDepth = function () {};\n\n    this.clearStencil = function () {};\n\n    this.render = function (scene, camera) {\n      if (camera instanceof THREE.Camera === false) {\n        console.error('THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.');\n        return;\n      }\n\n      if (this.autoClear === true) this.clear();\n      _this.info.render.vertices = 0;\n      _this.info.render.faces = 0;\n\n      _context.setTransform(_viewportWidth / _canvasWidth, 0, 0, -_viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY);\n\n      _context.translate(_canvasWidthHalf, _canvasHeightHalf);\n\n      _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n      _elements = _renderData.elements;\n      _lights = _renderData.lights;\n      _camera = camera;\n\n      _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n      /* DEBUG\n      setFillStyle( 'rgba( 0, 255, 255, 0.5 )' );\n      _context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );\n      */\n\n\n      calculateLights();\n\n      for (var e = 0, el = _elements.length; e < el; e++) {\n        var element = _elements[e];\n        var material = element.material;\n        if (material === undefined || material.opacity === 0) continue;\n\n        _elemBox.makeEmpty();\n\n        if (element instanceof THREE.RenderableSprite) {\n          _v1 = element;\n          _v1.x *= _canvasWidthHalf;\n          _v1.y *= _canvasHeightHalf;\n          renderSprite(_v1, element, material);\n        } else if (element instanceof THREE.RenderableLine) {\n          _v1 = element.v1;\n          _v2 = element.v2;\n          _v1.positionScreen.x *= _canvasWidthHalf;\n          _v1.positionScreen.y *= _canvasHeightHalf;\n          _v2.positionScreen.x *= _canvasWidthHalf;\n          _v2.positionScreen.y *= _canvasHeightHalf;\n\n          _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen]);\n\n          if (_clipBox.intersectsBox(_elemBox) === true) {\n            renderLine(_v1, _v2, element, material);\n          }\n        } else if (element instanceof THREE.RenderableFace) {\n          _v1 = element.v1;\n          _v2 = element.v2;\n          _v3 = element.v3;\n          if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n          if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n          if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n          _v1.positionScreen.x *= _canvasWidthHalf;\n          _v1.positionScreen.y *= _canvasHeightHalf;\n          _v2.positionScreen.x *= _canvasWidthHalf;\n          _v2.positionScreen.y *= _canvasHeightHalf;\n          _v3.positionScreen.x *= _canvasWidthHalf;\n          _v3.positionScreen.y *= _canvasHeightHalf;\n\n          if (material.overdraw > 0) {\n            expand(_v1.positionScreen, _v2.positionScreen, material.overdraw);\n            expand(_v2.positionScreen, _v3.positionScreen, material.overdraw);\n            expand(_v3.positionScreen, _v1.positionScreen, material.overdraw);\n          }\n\n          _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen, _v3.positionScreen]);\n\n          if (_clipBox.intersectsBox(_elemBox) === true) {\n            renderFace3(_v1, _v2, _v3, 0, 1, 2, element, material);\n          }\n        }\n        /* DEBUG\n        setLineWidth( 1 );\n        setStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );\n        _context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );\n        */\n\n\n        _clearBox.union(_elemBox);\n      }\n      /* DEBUG\n      setLineWidth( 1 );\n      setStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );\n      _context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );\n      */\n\n\n      _context.setTransform(1, 0, 0, 1, 0, 0);\n    }; //\n\n\n    function calculateLights() {\n      _ambientLight.setRGB(0, 0, 0);\n\n      _directionalLights.setRGB(0, 0, 0);\n\n      _pointLights.setRGB(0, 0, 0);\n\n      for (var l = 0, ll = _lights.length; l < ll; l++) {\n        var light = _lights[l];\n        var lightColor = light.color;\n\n        if (light instanceof THREE.AmbientLight) {\n          _ambientLight.add(lightColor);\n        } else if (light instanceof THREE.DirectionalLight) {\n          // for sprites\n          _directionalLights.add(lightColor);\n        } else if (light instanceof THREE.PointLight) {\n          // for sprites\n          _pointLights.add(lightColor);\n        }\n      }\n    }\n\n    function calculateLight(position, normal, color) {\n      for (var l = 0, ll = _lights.length; l < ll; l++) {\n        var light = _lights[l];\n\n        _lightColor.copy(light.color);\n\n        if (light instanceof THREE.DirectionalLight) {\n          var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n\n          var amount = normal.dot(lightPosition);\n          if (amount <= 0) continue;\n          amount *= light.intensity;\n          color.add(_lightColor.multiplyScalar(amount));\n        } else if (light instanceof THREE.PointLight) {\n          var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n\n          var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n          if (amount <= 0) continue;\n          amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n          if (amount == 0) continue;\n          amount *= light.intensity;\n          color.add(_lightColor.multiplyScalar(amount));\n        }\n      }\n    }\n\n    function renderSprite(v1, element, material) {\n      setOpacity(material.opacity);\n      setBlending(material.blending);\n      var scaleX = element.scale.x * _canvasWidthHalf;\n      var scaleY = element.scale.y * _canvasHeightHalf;\n      var dist = 0.5 * Math.sqrt(scaleX * scaleX + scaleY * scaleY); // allow for rotated sprite\n\n      _elemBox.min.set(v1.x - dist, v1.y - dist);\n\n      _elemBox.max.set(v1.x + dist, v1.y + dist);\n\n      if (material instanceof THREE.SpriteMaterial) {\n        var texture = material.map;\n\n        if (texture !== null) {\n          var pattern = _patterns[texture.id];\n\n          if (pattern === undefined || pattern.version !== texture.version) {\n            pattern = textureToPattern(texture);\n            _patterns[texture.id] = pattern;\n          }\n\n          if (pattern.canvas !== undefined) {\n            setFillStyle(pattern.canvas);\n            var bitmap = texture.image;\n            var ox = bitmap.width * texture.offset.x;\n            var oy = bitmap.height * texture.offset.y;\n            var sx = bitmap.width * texture.repeat.x;\n            var sy = bitmap.height * texture.repeat.y;\n            var cx = scaleX / sx;\n            var cy = scaleY / sy;\n\n            _context.save();\n\n            _context.translate(v1.x, v1.y);\n\n            if (material.rotation !== 0) _context.rotate(material.rotation);\n\n            _context.translate(-scaleX / 2, -scaleY / 2);\n\n            _context.scale(cx, cy);\n\n            _context.translate(-ox, -oy);\n\n            _context.fillRect(ox, oy, sx, sy);\n\n            _context.restore();\n          }\n        } else {\n          // no texture\n          setFillStyle(material.color.getStyle());\n\n          _context.save();\n\n          _context.translate(v1.x, v1.y);\n\n          if (material.rotation !== 0) _context.rotate(material.rotation);\n\n          _context.scale(scaleX, -scaleY);\n\n          _context.fillRect(-0.5, -0.5, 1, 1);\n\n          _context.restore();\n        }\n      } else if (material instanceof THREE.SpriteCanvasMaterial) {\n        setStrokeStyle(material.color.getStyle());\n        setFillStyle(material.color.getStyle());\n\n        _context.save();\n\n        _context.translate(v1.x, v1.y);\n\n        if (material.rotation !== 0) _context.rotate(material.rotation);\n\n        _context.scale(scaleX, scaleY);\n\n        material.program(_context);\n\n        _context.restore();\n      }\n      /* DEBUG\n      setStrokeStyle( 'rgb(255,255,0)' );\n      _context.beginPath();\n      _context.moveTo( v1.x - 10, v1.y );\n      _context.lineTo( v1.x + 10, v1.y );\n      _context.moveTo( v1.x, v1.y - 10 );\n      _context.lineTo( v1.x, v1.y + 10 );\n      _context.stroke();\n      */\n\n    }\n\n    function renderLine(v1, v2, element, material) {\n      setOpacity(material.opacity);\n      setBlending(material.blending);\n\n      _context.beginPath();\n\n      _context.moveTo(v1.positionScreen.x, v1.positionScreen.y);\n\n      _context.lineTo(v2.positionScreen.x, v2.positionScreen.y);\n\n      if (material instanceof THREE.LineBasicMaterial) {\n        setLineWidth(material.linewidth);\n        setLineCap(material.linecap);\n        setLineJoin(material.linejoin);\n\n        if (material.vertexColors !== THREE.VertexColors) {\n          setStrokeStyle(material.color.getStyle());\n        } else {\n          var colorStyle1 = element.vertexColors[0].getStyle();\n          var colorStyle2 = element.vertexColors[1].getStyle();\n\n          if (colorStyle1 === colorStyle2) {\n            setStrokeStyle(colorStyle1);\n          } else {\n            try {\n              var grad = _context.createLinearGradient(v1.positionScreen.x, v1.positionScreen.y, v2.positionScreen.x, v2.positionScreen.y);\n\n              grad.addColorStop(0, colorStyle1);\n              grad.addColorStop(1, colorStyle2);\n            } catch (exception) {\n              grad = colorStyle1;\n            }\n\n            setStrokeStyle(grad);\n          }\n        }\n\n        _context.stroke();\n\n        _elemBox.expandByScalar(material.linewidth * 2);\n      } else if (material instanceof THREE.LineDashedMaterial) {\n        setLineWidth(material.linewidth);\n        setLineCap(material.linecap);\n        setLineJoin(material.linejoin);\n        setStrokeStyle(material.color.getStyle());\n        setLineDash([material.dashSize, material.gapSize]);\n\n        _context.stroke();\n\n        _elemBox.expandByScalar(material.linewidth * 2);\n\n        setLineDash([]);\n      }\n    }\n\n    function renderFace3(v1, v2, v3, uv1, uv2, uv3, element, material) {\n      _this.info.render.vertices += 3;\n      _this.info.render.faces++;\n      setOpacity(material.opacity);\n      setBlending(material.blending);\n      _v1x = v1.positionScreen.x;\n      _v1y = v1.positionScreen.y;\n      _v2x = v2.positionScreen.x;\n      _v2y = v2.positionScreen.y;\n      _v3x = v3.positionScreen.x;\n      _v3y = v3.positionScreen.y;\n      drawTriangle(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y);\n\n      if ((material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) && material.map === null) {\n        _diffuseColor.copy(material.color);\n\n        _emissiveColor.copy(material.emissive);\n\n        if (material.vertexColors === THREE.FaceColors) {\n          _diffuseColor.multiply(element.color);\n        }\n\n        _color.copy(_ambientLight);\n\n        _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n\n        calculateLight(_centroid, element.normalModel, _color);\n\n        _color.multiply(_diffuseColor).add(_emissiveColor);\n\n        material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n      } else if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) {\n        if (material.map !== null) {\n          var mapping = material.map.mapping;\n\n          if (mapping === THREE.UVMapping) {\n            _uvs = element.uvs;\n            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[uv1].x, _uvs[uv1].y, _uvs[uv2].x, _uvs[uv2].y, _uvs[uv3].x, _uvs[uv3].y, material.map);\n          }\n        } else if (material.envMap !== null) {\n          if (material.envMap.mapping === THREE.SphericalReflectionMapping) {\n            _normal.copy(element.vertexNormalsModel[uv1]).applyMatrix3(_normalViewMatrix);\n\n            _uv1x = 0.5 * _normal.x + 0.5;\n            _uv1y = 0.5 * _normal.y + 0.5;\n\n            _normal.copy(element.vertexNormalsModel[uv2]).applyMatrix3(_normalViewMatrix);\n\n            _uv2x = 0.5 * _normal.x + 0.5;\n            _uv2y = 0.5 * _normal.y + 0.5;\n\n            _normal.copy(element.vertexNormalsModel[uv3]).applyMatrix3(_normalViewMatrix);\n\n            _uv3x = 0.5 * _normal.x + 0.5;\n            _uv3y = 0.5 * _normal.y + 0.5;\n            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap);\n          }\n        } else {\n          _color.copy(material.color);\n\n          if (material.vertexColors === THREE.FaceColors) {\n            _color.multiply(element.color);\n          }\n\n          material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n        }\n      } else if (material instanceof THREE.MeshNormalMaterial) {\n        _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix);\n\n        _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(0.5).addScalar(0.5);\n\n        material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n      } else {\n        _color.setRGB(1, 1, 1);\n\n        material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n      }\n    } //\n\n\n    function drawTriangle(x0, y0, x1, y1, x2, y2) {\n      _context.beginPath();\n\n      _context.moveTo(x0, y0);\n\n      _context.lineTo(x1, y1);\n\n      _context.lineTo(x2, y2);\n\n      _context.closePath();\n    }\n\n    function strokePath(color, linewidth, linecap, linejoin) {\n      setLineWidth(linewidth);\n      setLineCap(linecap);\n      setLineJoin(linejoin);\n      setStrokeStyle(color.getStyle());\n\n      _context.stroke();\n\n      _elemBox.expandByScalar(linewidth * 2);\n    }\n\n    function fillPath(color) {\n      setFillStyle(color.getStyle());\n\n      _context.fill();\n    }\n\n    function textureToPattern(texture) {\n      if (texture.version === 0 || texture instanceof THREE.CompressedTexture || texture instanceof THREE.DataTexture) {\n        return {\n          canvas: undefined,\n          version: texture.version\n        };\n      }\n\n      var image = texture.image;\n\n      if (image.complete === false) {\n        return {\n          canvas: undefined,\n          version: 0\n        };\n      }\n\n      var canvas = document.createElement('canvas');\n      canvas.width = image.width;\n      canvas.height = image.height;\n      var context = canvas.getContext('2d');\n      context.setTransform(1, 0, 0, -1, 0, image.height);\n      context.drawImage(image, 0, 0);\n      var repeatX = texture.wrapS === THREE.RepeatWrapping;\n      var repeatY = texture.wrapT === THREE.RepeatWrapping;\n      var repeat = 'no-repeat';\n\n      if (repeatX === true && repeatY === true) {\n        repeat = 'repeat';\n      } else if (repeatX === true) {\n        repeat = 'repeat-x';\n      } else if (repeatY === true) {\n        repeat = 'repeat-y';\n      }\n\n      var pattern = _context.createPattern(canvas, repeat);\n\n      if (texture.onUpdate) texture.onUpdate(texture);\n      return {\n        canvas: pattern,\n        version: texture.version\n      };\n    }\n\n    function patternPath(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture) {\n      var pattern = _patterns[texture.id];\n\n      if (pattern === undefined || pattern.version !== texture.version) {\n        pattern = textureToPattern(texture);\n        _patterns[texture.id] = pattern;\n      }\n\n      if (pattern.canvas !== undefined) {\n        setFillStyle(pattern.canvas);\n      } else {\n        setFillStyle('rgba( 0, 0, 0, 1)');\n\n        _context.fill();\n\n        return;\n      } // http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n\n      var a,\n          b,\n          c,\n          d,\n          e,\n          f,\n          det,\n          idet,\n          offsetX = texture.offset.x / texture.repeat.x,\n          offsetY = texture.offset.y / texture.repeat.y,\n          width = texture.image.width * texture.repeat.x,\n          height = texture.image.height * texture.repeat.y;\n      u0 = (u0 + offsetX) * width;\n      v0 = (v0 + offsetY) * height;\n      u1 = (u1 + offsetX) * width;\n      v1 = (v1 + offsetY) * height;\n      u2 = (u2 + offsetX) * width;\n      v2 = (v2 + offsetY) * height;\n      x1 -= x0;\n      y1 -= y0;\n      x2 -= x0;\n      y2 -= y0;\n      u1 -= u0;\n      v1 -= v0;\n      u2 -= u0;\n      v2 -= v0;\n      det = u1 * v2 - u2 * v1;\n      if (det === 0) return;\n      idet = 1 / det;\n      a = (v2 * x1 - v1 * x2) * idet;\n      b = (v2 * y1 - v1 * y2) * idet;\n      c = (u1 * x2 - u2 * x1) * idet;\n      d = (u1 * y2 - u2 * y1) * idet;\n      e = x0 - a * u0 - c * v0;\n      f = y0 - b * u0 - d * v0;\n\n      _context.save();\n\n      _context.transform(a, b, c, d, e, f);\n\n      _context.fill();\n\n      _context.restore();\n    }\n\n    function clipImage(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image) {\n      // http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n      var a,\n          b,\n          c,\n          d,\n          e,\n          f,\n          det,\n          idet,\n          width = image.width - 1,\n          height = image.height - 1;\n      u0 *= width;\n      v0 *= height;\n      u1 *= width;\n      v1 *= height;\n      u2 *= width;\n      v2 *= height;\n      x1 -= x0;\n      y1 -= y0;\n      x2 -= x0;\n      y2 -= y0;\n      u1 -= u0;\n      v1 -= v0;\n      u2 -= u0;\n      v2 -= v0;\n      det = u1 * v2 - u2 * v1;\n      idet = 1 / det;\n      a = (v2 * x1 - v1 * x2) * idet;\n      b = (v2 * y1 - v1 * y2) * idet;\n      c = (u1 * x2 - u2 * x1) * idet;\n      d = (u1 * y2 - u2 * y1) * idet;\n      e = x0 - a * u0 - c * v0;\n      f = y0 - b * u0 - d * v0;\n\n      _context.save();\n\n      _context.transform(a, b, c, d, e, f);\n\n      _context.clip();\n\n      _context.drawImage(image, 0, 0);\n\n      _context.restore();\n    } // Hide anti-alias gaps\n\n\n    function expand(v1, v2, pixels) {\n      var x = v2.x - v1.x,\n          y = v2.y - v1.y,\n          det = x * x + y * y,\n          idet;\n      if (det === 0) return;\n      idet = pixels / Math.sqrt(det);\n      x *= idet;\n      y *= idet;\n      v2.x += x;\n      v2.y += y;\n      v1.x -= x;\n      v1.y -= y;\n    } // Context cached methods.\n\n\n    function setOpacity(value) {\n      if (_contextGlobalAlpha !== value) {\n        _context.globalAlpha = value;\n        _contextGlobalAlpha = value;\n      }\n    }\n\n    function setBlending(value) {\n      if (_contextGlobalCompositeOperation !== value) {\n        if (value === THREE.NormalBlending) {\n          _context.globalCompositeOperation = 'source-over';\n        } else if (value === THREE.AdditiveBlending) {\n          _context.globalCompositeOperation = 'lighter';\n        } else if (value === THREE.SubtractiveBlending) {\n          _context.globalCompositeOperation = 'darker';\n        }\n\n        _contextGlobalCompositeOperation = value;\n      }\n    }\n\n    function setLineWidth(value) {\n      if (_contextLineWidth !== value) {\n        _context.lineWidth = value;\n        _contextLineWidth = value;\n      }\n    }\n\n    function setLineCap(value) {\n      // \"butt\", \"round\", \"square\"\n      if (_contextLineCap !== value) {\n        _context.lineCap = value;\n        _contextLineCap = value;\n      }\n    }\n\n    function setLineJoin(value) {\n      // \"round\", \"bevel\", \"miter\"\n      if (_contextLineJoin !== value) {\n        _context.lineJoin = value;\n        _contextLineJoin = value;\n      }\n    }\n\n    function setStrokeStyle(value) {\n      if (_contextStrokeStyle !== value) {\n        _context.strokeStyle = value;\n        _contextStrokeStyle = value;\n      }\n    }\n\n    function setFillStyle(value) {\n      if (_contextFillStyle !== value) {\n        _context.fillStyle = value;\n        _contextFillStyle = value;\n      }\n    }\n\n    function setLineDash(value) {\n      if (_contextLineDash.length !== value.length) {\n        _context.setLineDash(value);\n\n        _contextLineDash = value;\n      }\n    }\n  };\n};","map":{"version":3,"sources":["E:/baking/hongpeibang/node_modules/three-js/addons/CanvasRenderer.js"],"names":["module","exports","THREE","SpriteCanvasMaterial","parameters","Material","call","type","color","Color","program","context","setValues","prototype","Object","create","constructor","clone","material","copy","CanvasRenderer","console","log","REVISION","_this","_renderData","_elements","_lights","_projector","Projector","_canvas","canvas","undefined","document","createElement","_canvasWidth","width","_canvasHeight","height","_canvasWidthHalf","Math","floor","_canvasHeightHalf","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_pixelRatio","_context","getContext","alpha","_clearColor","_clearAlpha","_contextGlobalAlpha","_contextGlobalCompositeOperation","_contextStrokeStyle","_contextFillStyle","_contextLineWidth","_contextLineCap","_contextLineJoin","_contextLineDash","_camera","_v1","_v2","_v3","_v4","_v5","RenderableVertex","_v6","_v1x","_v1y","_v2x","_v2y","_v3x","_v3y","_v4x","_v4y","_v5x","_v5y","_v6x","_v6y","_color","_color1","_color2","_color3","_color4","_diffuseColor","_emissiveColor","_lightColor","_patterns","_image","_uvs","_uv1x","_uv1y","_uv2x","_uv2y","_uv3x","_uv3y","_clipBox","Box2","_clearBox","_elemBox","_ambientLight","_directionalLights","_pointLights","_vector3","Vector3","_centroid","_normal","_normalViewMatrix","Matrix3","setLineDash","domElement","autoClear","sortObjects","sortElements","info","render","vertices","faces","supportsVertexTextures","setFaceCulling","getContextAttributes","getPixelRatio","setPixelRatio","value","setSize","updateStyle","style","min","set","max","setViewport","x","y","setScissor","setScissorTest","setClearColor","setClearColorHex","hex","warn","getClearColor","getClearAlpha","getMaxAnisotropy","clear","isEmpty","intersect","expandByScalar","clearRect","setBlending","NormalBlending","setOpacity","setFillStyle","r","g","b","fillRect","makeEmpty","clearColor","clearDepth","clearStencil","scene","camera","Camera","error","setTransform","translate","projectScene","elements","lights","getNormalMatrix","matrixWorldInverse","calculateLights","e","el","length","element","opacity","RenderableSprite","renderSprite","RenderableLine","v1","v2","positionScreen","setFromPoints","intersectsBox","renderLine","RenderableFace","v3","z","overdraw","expand","renderFace3","union","setRGB","l","ll","light","lightColor","AmbientLight","add","DirectionalLight","PointLight","calculateLight","position","normal","lightPosition","setFromMatrixPosition","matrixWorld","normalize","amount","dot","intensity","multiplyScalar","subVectors","distance","distanceTo","blending","scaleX","scale","scaleY","dist","sqrt","SpriteMaterial","texture","map","pattern","id","version","textureToPattern","bitmap","image","ox","offset","oy","sx","repeat","sy","cx","cy","save","rotation","rotate","restore","getStyle","setStrokeStyle","beginPath","moveTo","lineTo","LineBasicMaterial","setLineWidth","linewidth","setLineCap","linecap","setLineJoin","linejoin","vertexColors","VertexColors","colorStyle1","colorStyle2","grad","createLinearGradient","addColorStop","exception","stroke","LineDashedMaterial","dashSize","gapSize","uv1","uv2","uv3","drawTriangle","MeshLambertMaterial","MeshPhongMaterial","emissive","FaceColors","multiply","positionWorld","divideScalar","normalModel","wireframe","strokePath","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","fillPath","MeshBasicMaterial","mapping","UVMapping","uvs","patternPath","envMap","SphericalReflectionMapping","vertexNormalsModel","applyMatrix3","MeshNormalMaterial","addScalar","x0","y0","x1","y1","x2","y2","closePath","fill","CompressedTexture","DataTexture","complete","drawImage","repeatX","wrapS","RepeatWrapping","repeatY","wrapT","createPattern","onUpdate","u0","v0","u1","u2","a","c","d","f","det","idet","offsetX","offsetY","transform","clipImage","clip","pixels","globalAlpha","globalCompositeOperation","AdditiveBlending","SubtractiveBlending","lineWidth","lineCap","lineJoin","strokeStyle","fillStyle"],"mappings":"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","sourcesContent":["module.exports = function( THREE ){\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.SpriteCanvasMaterial = function ( parameters ) {\n\n\t\tTHREE.Material.call( this );\n\n\t\tthis.type = 'SpriteCanvasMaterial';\n\n\t\tthis.color = new THREE.Color( 0xffffff );\n\t\tthis.program = function ( context, color ) {};\n\n\t\tthis.setValues( parameters );\n\n\t};\n\n\tTHREE.SpriteCanvasMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n\n\tTHREE.SpriteCanvasMaterial.prototype.clone = function () {\n\n\t\tvar material = new THREE.SpriteCanvasMaterial();\n\n\t\tmaterial.copy( this );\n\t\tmaterial.color.copy( this.color );\n\t\tmaterial.program = this.program;\n\n\t\treturn material;\n\n\t};\n\n\t//\n\n\tTHREE.CanvasRenderer = function ( parameters ) {\n\n\t\tconsole.log( 'THREE.CanvasRenderer', THREE.REVISION );\n\n\t\tparameters = parameters || {};\n\n\t\tvar _this = this,\n\t\t_renderData, _elements, _lights,\n\t\t_projector = new THREE.Projector(),\n\n\t\t_canvas = parameters.canvas !== undefined\n\t\t\t\t ? parameters.canvas\n\t\t\t\t : document.createElement( 'canvas' ),\n\n\t\t_canvasWidth = _canvas.width,\n\t\t_canvasHeight = _canvas.height,\n\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 ),\n\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 ),\n\n\t\t_viewportX = 0,\n\t\t_viewportY = 0,\n\t\t_viewportWidth = _canvasWidth,\n\t\t_viewportHeight = _canvasHeight,\n\n\t\t_pixelRatio = 1,\n\n\t\t_context = _canvas.getContext( '2d', {\n\t\t\talpha: parameters.alpha === true\n\t\t} ),\n\n\t\t_clearColor = new THREE.Color( 0x000000 ),\n\t\t_clearAlpha = parameters.alpha === true ? 0 : 1,\n\n\t\t_contextGlobalAlpha = 1,\n\t\t_contextGlobalCompositeOperation = 0,\n\t\t_contextStrokeStyle = null,\n\t\t_contextFillStyle = null,\n\t\t_contextLineWidth = null,\n\t\t_contextLineCap = null,\n\t\t_contextLineJoin = null,\n\t\t_contextLineDash = [],\n\n\t\t_camera,\n\n\t\t_v1, _v2, _v3, _v4,\n\t\t_v5 = new THREE.RenderableVertex(),\n\t\t_v6 = new THREE.RenderableVertex(),\n\n\t\t_v1x, _v1y, _v2x, _v2y, _v3x, _v3y,\n\t\t_v4x, _v4y, _v5x, _v5y, _v6x, _v6y,\n\n\t\t_color = new THREE.Color(),\n\t\t_color1 = new THREE.Color(),\n\t\t_color2 = new THREE.Color(),\n\t\t_color3 = new THREE.Color(),\n\t\t_color4 = new THREE.Color(),\n\n\t\t_diffuseColor = new THREE.Color(),\n\t\t_emissiveColor = new THREE.Color(),\n\n\t\t_lightColor = new THREE.Color(),\n\n\t\t_patterns = {},\n\n\t\t_image, _uvs,\n\t\t_uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,\n\n\t\t_clipBox = new THREE.Box2(),\n\t\t_clearBox = new THREE.Box2(),\n\t\t_elemBox = new THREE.Box2(),\n\n\t\t_ambientLight = new THREE.Color(),\n\t\t_directionalLights = new THREE.Color(),\n\t\t_pointLights = new THREE.Color(),\n\n\t\t_vector3 = new THREE.Vector3(), // Needed for PointLight\n\t\t_centroid = new THREE.Vector3(),\n\t\t_normal = new THREE.Vector3(),\n\t\t_normalViewMatrix = new THREE.Matrix3();\n\n\t\t/* TODO\n\t\t_canvas.mozImageSmoothingEnabled = false;\n\t\t_canvas.webkitImageSmoothingEnabled = false;\n\t\t_canvas.msImageSmoothingEnabled = false;\n\t\t_canvas.imageSmoothingEnabled = false;\n\t\t*/\n\n\t\t// dash+gap fallbacks for Firefox and everything else\n\n\t\tif ( _context.setLineDash === undefined ) {\n\n\t\t\t_context.setLineDash = function () {};\n\n\t\t}\n\n\t\tthis.domElement = _canvas;\n\n\t\tthis.autoClear = true;\n\t\tthis.sortObjects = true;\n\t\tthis.sortElements = true;\n\n\t\tthis.info = {\n\n\t\t\trender: {\n\n\t\t\t\tvertices: 0,\n\t\t\t\tfaces: 0\n\n\t\t\t}\n\n\t\t};\n\n\t\t// WebGLRenderer compatibility\n\n\t\tthis.supportsVertexTextures = function () {};\n\t\tthis.setFaceCulling = function () {};\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _context;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _context.getContextAttributes();\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value !== undefined ) _pixelRatio = value;\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t\t_canvasWidth = width * _pixelRatio;\n\t\t\t_canvasHeight = height * _pixelRatio;\n\n\t\t\t_canvas.width = _canvasWidth;\n\t\t\t_canvas.height = _canvasHeight;\n\n\t\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 );\n\t\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 );\n\n\t\t\tif ( updateStyle !== false ) {\n\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\t_clipBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t\t_clipBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t\t\t_contextGlobalAlpha = 1;\n\t\t\t_contextGlobalCompositeOperation = 0;\n\t\t\t_contextStrokeStyle = null;\n\t\t\t_contextFillStyle = null;\n\t\t\t_contextLineWidth = null;\n\t\t\t_contextLineCap = null;\n\t\t\t_contextLineJoin = null;\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\t_viewportX = x * _pixelRatio;\n\t\t\t_viewportY = y * _pixelRatio;\n\n\t\t\t_viewportWidth = width * _pixelRatio;\n\t\t\t_viewportHeight = height * _pixelRatio;\n\n\t\t};\n\n\t\tthis.setScissor = function () {};\n\t\tthis.setScissorTest = function () {};\n\n\t\tthis.setClearColor = function ( color, alpha ) {\n\n\t\t\t_clearColor.set( color );\n\t\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n\t\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t\t};\n\n\t\tthis.setClearColorHex = function ( hex, alpha ) {\n\n\t\t\tconsole.warn( 'THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.' );\n\t\t\tthis.setClearColor( hex, alpha );\n\n\t\t};\n\n\t\tthis.getClearColor = function () {\n\n\t\t\treturn _clearColor;\n\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\n\t\t\treturn _clearAlpha;\n\n\t\t};\n\n\t\tthis.getMaxAnisotropy = function () {\n\n\t\t\treturn 0;\n\n\t\t};\n\n\t\tthis.clear = function () {\n\n\t\t\tif ( _clearBox.isEmpty() === false ) {\n\n\t\t\t\t_clearBox.intersect( _clipBox );\n\t\t\t\t_clearBox.expandByScalar( 2 );\n\n\t\t\t\t_clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n\t\t\t\t_clearBox.min.y =  - _clearBox.min.y + _canvasHeightHalf;\t\t// higher y value !\n\t\t\t\t_clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n\t\t\t\t_clearBox.max.y =  - _clearBox.max.y + _canvasHeightHalf;\t\t// lower y value !\n\n\t\t\t\tif ( _clearAlpha < 1 ) {\n\n\t\t\t\t\t_context.clearRect(\n\t\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( _clearAlpha > 0 ) {\n\n\t\t\t\t\tsetBlending( THREE.NormalBlending );\n\t\t\t\t\tsetOpacity( 1 );\n\n\t\t\t\t\tsetFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearAlpha + ')' );\n\n\t\t\t\t\t_context.fillRect(\n\t\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\t_clearBox.makeEmpty();\n\n\t\t\t}\n\n\t\t};\n\n\t\t// compatibility\n\n\t\tthis.clearColor = function () {};\n\t\tthis.clearDepth = function () {};\n\t\tthis.clearStencil = function () {};\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( camera instanceof THREE.Camera === false ) {\n\n\t\t\t\tconsole.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.autoClear === true ) this.clear();\n\n\t\t\t_this.info.render.vertices = 0;\n\t\t\t_this.info.render.faces = 0;\n\n\t\t\t_context.setTransform( _viewportWidth / _canvasWidth, 0, 0, - _viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY );\n\t\t\t_context.translate( _canvasWidthHalf, _canvasHeightHalf );\n\n\t\t\t_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\n\t\t\t_elements = _renderData.elements;\n\t\t\t_lights = _renderData.lights;\n\t\t\t_camera = camera;\n\n\t\t\t_normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse );\n\n\t\t\t/* DEBUG\n\t\t\tsetFillStyle( 'rgba( 0, 255, 255, 0.5 )' );\n\t\t\t_context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );\n\t\t\t*/\n\n\t\t\tcalculateLights();\n\n\t\t\tfor ( var e = 0, el = _elements.length; e < el; e ++ ) {\n\n\t\t\t\tvar element = _elements[ e ];\n\n\t\t\t\tvar material = element.material;\n\n\t\t\t\tif ( material === undefined || material.opacity === 0 ) continue;\n\n\t\t\t\t_elemBox.makeEmpty();\n\n\t\t\t\tif ( element instanceof THREE.RenderableSprite ) {\n\n\t\t\t\t\t_v1 = element;\n\t\t\t\t\t_v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;\n\n\t\t\t\t\trenderSprite( _v1, element, material );\n\n\t\t\t\t} else if ( element instanceof THREE.RenderableLine ) {\n\n\t\t\t\t\t_v1 = element.v1; _v2 = element.v2;\n\n\t\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\n\t\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t\t_v2.positionScreen\n\t\t\t\t\t] );\n\n\t\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\t\trenderLine( _v1, _v2, element, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( element instanceof THREE.RenderableFace ) {\n\n\t\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\n\n\t\t\t\t\tif ( _v1.positionScreen.z < - 1 || _v1.positionScreen.z > 1 ) continue;\n\t\t\t\t\tif ( _v2.positionScreen.z < - 1 || _v2.positionScreen.z > 1 ) continue;\n\t\t\t\t\tif ( _v3.positionScreen.z < - 1 || _v3.positionScreen.z > 1 ) continue;\n\n\t\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t\t_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\n\n\t\t\t\t\tif ( material.overdraw > 0 ) {\n\n\t\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen, material.overdraw );\n\t\t\t\t\t\texpand( _v2.positionScreen, _v3.positionScreen, material.overdraw );\n\t\t\t\t\t\texpand( _v3.positionScreen, _v1.positionScreen, material.overdraw );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t\t_v2.positionScreen,\n\t\t\t\t\t\t_v3.positionScreen\n\t\t\t\t\t] );\n\n\t\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\t\trenderFace3( _v1, _v2, _v3, 0, 1, 2, element, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t/* DEBUG\n\t\t\t\tsetLineWidth( 1 );\n\t\t\t\tsetStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );\n\t\t\t\t_context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );\n\t\t\t\t*/\n\n\t\t\t\t_clearBox.union( _elemBox );\n\n\t\t\t}\n\n\t\t\t/* DEBUG\n\t\t\tsetLineWidth( 1 );\n\t\t\tsetStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );\n\t\t\t_context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );\n\t\t\t*/\n\n\t\t\t_context.setTransform( 1, 0, 0, 1, 0, 0 );\n\n\t\t};\n\n\t\t//\n\n\t\tfunction calculateLights() {\n\n\t\t\t_ambientLight.setRGB( 0, 0, 0 );\n\t\t\t_directionalLights.setRGB( 0, 0, 0 );\n\t\t\t_pointLights.setRGB( 0, 0, 0 );\n\n\t\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\n\t\t\t\tvar light = _lights[ l ];\n\t\t\t\tvar lightColor = light.color;\n\n\t\t\t\tif ( light instanceof THREE.AmbientLight ) {\n\n\t\t\t\t\t_ambientLight.add( lightColor );\n\n\t\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\t\t// for sprites\n\n\t\t\t\t\t_directionalLights.add( lightColor );\n\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\n\t\t\t\t\t// for sprites\n\n\t\t\t\t\t_pointLights.add( lightColor );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction calculateLight( position, normal, color ) {\n\n\t\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\n\t\t\t\tvar light = _lights[ l ];\n\n\t\t\t\t_lightColor.copy( light.color );\n\n\t\t\t\tif ( light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize();\n\n\t\t\t\t\tvar amount = normal.dot( lightPosition );\n\n\t\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\t\tamount *= light.intensity;\n\n\t\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\n\t\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\t\tvar amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\n\n\t\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\t\tamount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\n\n\t\t\t\t\tif ( amount == 0 ) continue;\n\n\t\t\t\t\tamount *= light.intensity;\n\n\t\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderSprite( v1, element, material ) {\n\n\t\t\tsetOpacity( material.opacity );\n\t\t\tsetBlending( material.blending );\n\n\t\t\tvar scaleX = element.scale.x * _canvasWidthHalf;\n\t\t\tvar scaleY = element.scale.y * _canvasHeightHalf;\n\n\t\t\tvar dist = 0.5 * Math.sqrt( scaleX * scaleX + scaleY * scaleY ); // allow for rotated sprite\n\t\t\t_elemBox.min.set( v1.x - dist, v1.y - dist );\n\t\t\t_elemBox.max.set( v1.x + dist, v1.y + dist );\n\n\t\t\tif ( material instanceof THREE.SpriteMaterial ) {\n\n\t\t\t\tvar texture = material.map;\n\n\t\t\t\tif ( texture !== null ) {\n\n\t\t\t\t\tvar pattern = _patterns[ texture.id ];\n\n\t\t\t\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\n\t\t\t\t\t\tpattern = textureToPattern( texture );\n\t\t\t\t\t\t_patterns[ texture.id ] = pattern;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( pattern.canvas !== undefined ) {\n\n\t\t\t\t\t\tsetFillStyle( pattern.canvas );\n\n\t\t\t\t\t\tvar bitmap = texture.image;\n\n\t\t\t\t\t\tvar ox = bitmap.width * texture.offset.x;\n\t\t\t\t\t\tvar oy = bitmap.height * texture.offset.y;\n\n\t\t\t\t\t\tvar sx = bitmap.width * texture.repeat.x;\n\t\t\t\t\t\tvar sy = bitmap.height * texture.repeat.y;\n\n\t\t\t\t\t\tvar cx = scaleX / sx;\n\t\t\t\t\t\tvar cy = scaleY / sy;\n\n\t\t\t\t\t\t_context.save();\n\t\t\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t\t\t_context.translate( - scaleX / 2, - scaleY / 2 );\n\t\t\t\t\t\t_context.scale( cx, cy );\n\t\t\t\t\t\t_context.translate( - ox, - oy );\n\t\t\t\t\t\t_context.fillRect( ox, oy, sx, sy );\n\t\t\t\t\t\t_context.restore();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// no texture\n\n\t\t\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t\t\t_context.save();\n\t\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t\t_context.scale( scaleX, - scaleY );\n\t\t\t\t\t_context.fillRect( - 0.5, - 0.5, 1, 1 );\n\t\t\t\t\t_context.restore();\n\n\t\t\t\t}\n\n\t\t\t} else if ( material instanceof THREE.SpriteCanvasMaterial ) {\n\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t\t_context.save();\n\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t_context.scale( scaleX, scaleY );\n\n\t\t\t\tmaterial.program( _context );\n\n\t\t\t\t_context.restore();\n\n\t\t\t}\n\n\t\t\t/* DEBUG\n\t\t\tsetStrokeStyle( 'rgb(255,255,0)' );\n\t\t\t_context.beginPath();\n\t\t\t_context.moveTo( v1.x - 10, v1.y );\n\t\t\t_context.lineTo( v1.x + 10, v1.y );\n\t\t\t_context.moveTo( v1.x, v1.y - 10 );\n\t\t\t_context.lineTo( v1.x, v1.y + 10 );\n\t\t\t_context.stroke();\n\t\t\t*/\n\n\t\t}\n\n\t\tfunction renderLine( v1, v2, element, material ) {\n\n\t\t\tsetOpacity( material.opacity );\n\t\t\tsetBlending( material.blending );\n\n\t\t\t_context.beginPath();\n\t\t\t_context.moveTo( v1.positionScreen.x, v1.positionScreen.y );\n\t\t\t_context.lineTo( v2.positionScreen.x, v2.positionScreen.y );\n\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\n\n\t\t\t\tsetLineWidth( material.linewidth );\n\t\t\t\tsetLineCap( material.linecap );\n\t\t\t\tsetLineJoin( material.linejoin );\n\n\t\t\t\tif ( material.vertexColors !== THREE.VertexColors ) {\n\n\t\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar colorStyle1 = element.vertexColors[ 0 ].getStyle();\n\t\t\t\t\tvar colorStyle2 = element.vertexColors[ 1 ].getStyle();\n\n\t\t\t\t\tif ( colorStyle1 === colorStyle2 ) {\n\n\t\t\t\t\t\tsetStrokeStyle( colorStyle1 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttry {\n\n\t\t\t\t\t\t\tvar grad = _context.createLinearGradient(\n\t\t\t\t\t\t\t\tv1.positionScreen.x,\n\t\t\t\t\t\t\t\tv1.positionScreen.y,\n\t\t\t\t\t\t\t\tv2.positionScreen.x,\n\t\t\t\t\t\t\t\tv2.positionScreen.y\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tgrad.addColorStop( 0, colorStyle1 );\n\t\t\t\t\t\t\tgrad.addColorStop( 1, colorStyle2 );\n\n\t\t\t\t\t\t} catch ( exception ) {\n\n\t\t\t\t\t\t\tgrad = colorStyle1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsetStrokeStyle( grad );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_context.stroke();\n\t\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\n\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\n\n\t\t\t\tsetLineWidth( material.linewidth );\n\t\t\t\tsetLineCap( material.linecap );\n\t\t\t\tsetLineJoin( material.linejoin );\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\t\tsetLineDash( [ material.dashSize, material.gapSize ] );\n\n\t\t\t\t_context.stroke();\n\n\t\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\n\t\t\t\tsetLineDash( [] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material ) {\n\n\t\t\t_this.info.render.vertices += 3;\n\t\t\t_this.info.render.faces ++;\n\n\t\t\tsetOpacity( material.opacity );\n\t\t\tsetBlending( material.blending );\n\n\t\t\t_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\n\t\t\t_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\n\t\t\t_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\n\n\t\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );\n\n\t\t\tif ( ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) && material.map === null ) {\n\n\t\t\t\t_diffuseColor.copy( material.color );\n\t\t\t\t_emissiveColor.copy( material.emissive );\n\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\n\t\t\t\t\t_diffuseColor.multiply( element.color );\n\n\t\t\t\t}\n\n\t\t\t\t_color.copy( _ambientLight );\n\n\t\t\t\t_centroid.copy( v1.positionWorld ).add( v2.positionWorld ).add( v3.positionWorld ).divideScalar( 3 );\n\n\t\t\t\tcalculateLight( _centroid, element.normalModel, _color );\n\n\t\t\t\t_color.multiply( _diffuseColor ).add( _emissiveColor );\n\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\n\t\t\t} else if ( material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t\t    material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t\t    material instanceof THREE.MeshPhongMaterial ) {\n\n\t\t\t\tif ( material.map !== null ) {\n\n\t\t\t\t\tvar mapping = material.map.mapping;\n\n\t\t\t\t\tif ( mapping === THREE.UVMapping ) {\n\n\t\t\t\t\t\t_uvs = element.uvs;\n\t\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.envMap !== null ) {\n\n\t\t\t\t\tif ( material.envMap.mapping === THREE.SphericalReflectionMapping ) {\n\n\t\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv1 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t\t_uv1x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t\t_uv1y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv2 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t\t_uv2x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t\t_uv2y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv3 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t\t_uv3x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t\t_uv3y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_color.copy( material.color );\n\n\t\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\n\t\t\t\t\t\t_color.multiply( element.color );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t\t : fillPath( _color );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\n\n\t\t\t\t_normal.copy( element.normalModel ).applyMatrix3( _normalViewMatrix );\n\n\t\t\t\t_color.setRGB( _normal.x, _normal.y, _normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\n\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\n\t\t\t} else {\n\n\t\t\t\t_color.setRGB( 1, 1, 1 );\n\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction drawTriangle( x0, y0, x1, y1, x2, y2 ) {\n\n\t\t\t_context.beginPath();\n\t\t\t_context.moveTo( x0, y0 );\n\t\t\t_context.lineTo( x1, y1 );\n\t\t\t_context.lineTo( x2, y2 );\n\t\t\t_context.closePath();\n\n\t\t}\n\n\t\tfunction strokePath( color, linewidth, linecap, linejoin ) {\n\n\t\t\tsetLineWidth( linewidth );\n\t\t\tsetLineCap( linecap );\n\t\t\tsetLineJoin( linejoin );\n\t\t\tsetStrokeStyle( color.getStyle() );\n\n\t\t\t_context.stroke();\n\n\t\t\t_elemBox.expandByScalar( linewidth * 2 );\n\n\t\t}\n\n\t\tfunction fillPath( color ) {\n\n\t\t\tsetFillStyle( color.getStyle() );\n\t\t\t_context.fill();\n\n\t\t}\n\n\t\tfunction textureToPattern( texture ) {\n\n\t\t\tif ( texture.version === 0 ||\n\t\t\t\ttexture instanceof THREE.CompressedTexture ||\n\t\t\t\ttexture instanceof THREE.DataTexture ) {\n\n\t\t\t\treturn {\n\t\t\t\t\tcanvas: undefined,\n\t\t\t\t\tversion: texture.version\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar image = texture.image;\n\n\t\t\tif ( image.complete === false ) {\n\n\t\t\t\treturn {\n\t\t\t\t\tcanvas: undefined,\n\t\t\t\t\tversion: 0\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar canvas = document.createElement( 'canvas' );\n\t\t\tcanvas.width = image.width;\n\t\t\tcanvas.height = image.height;\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.setTransform( 1, 0, 0, - 1, 0, image.height );\n\t\t\tcontext.drawImage( image, 0, 0 );\n\n\t\t\tvar repeatX = texture.wrapS === THREE.RepeatWrapping;\n\t\t\tvar repeatY = texture.wrapT === THREE.RepeatWrapping;\n\n\t\t\tvar repeat = 'no-repeat';\n\n\t\t\tif ( repeatX === true && repeatY === true ) {\n\n\t\t\t\trepeat = 'repeat';\n\n\t\t\t} else if ( repeatX === true ) {\n\n\t\t\t\trepeat = 'repeat-x';\n\n\t\t\t} else if ( repeatY === true ) {\n\n\t\t\t\trepeat = 'repeat-y';\n\n\t\t\t}\n\n\t\t\tvar pattern = _context.createPattern( canvas, repeat );\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t\treturn {\n\t\t\t\tcanvas: pattern,\n\t\t\t\tversion: texture.version\n\t\t\t};\n\n\t\t}\n\n\t\tfunction patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {\n\n\t\t\tvar pattern = _patterns[ texture.id ];\n\n\t\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\n\t\t\t\tpattern = textureToPattern( texture );\n\t\t\t\t_patterns[ texture.id ] = pattern;\n\n\t\t\t}\n\n\t\t\tif ( pattern.canvas !== undefined ) {\n\n\t\t\t\tsetFillStyle( pattern.canvas );\n\n\t\t\t} else {\n\n\t\t\t\tsetFillStyle( 'rgba( 0, 0, 0, 1)' );\n\t\t\t\t_context.fill();\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n\t\t\tvar a, b, c, d, e, f, det, idet,\n\t\t\toffsetX = texture.offset.x / texture.repeat.x,\n\t\t\toffsetY = texture.offset.y / texture.repeat.y,\n\t\t\twidth = texture.image.width * texture.repeat.x,\n\t\t\theight = texture.image.height * texture.repeat.y;\n\n\t\t\tu0 = ( u0 + offsetX ) * width;\n\t\t\tv0 = ( v0 + offsetY ) * height;\n\n\t\t\tu1 = ( u1 + offsetX ) * width;\n\t\t\tv1 = ( v1 + offsetY ) * height;\n\n\t\t\tu2 = ( u2 + offsetX ) * width;\n\t\t\tv2 = ( v2 + offsetY ) * height;\n\n\t\t\tx1 -= x0; y1 -= y0;\n\t\t\tx2 -= x0; y2 -= y0;\n\n\t\t\tu1 -= u0; v1 -= v0;\n\t\t\tu2 -= u0; v2 -= v0;\n\n\t\t\tdet = u1 * v2 - u2 * v1;\n\n\t\t\tif ( det === 0 ) return;\n\n\t\t\tidet = 1 / det;\n\n\t\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\n\t\t\te = x0 - a * u0 - c * v0;\n\t\t\tf = y0 - b * u0 - d * v0;\n\n\t\t\t_context.save();\n\t\t\t_context.transform( a, b, c, d, e, f );\n\t\t\t_context.fill();\n\t\t\t_context.restore();\n\n\t\t}\n\n\t\tfunction clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {\n\n\t\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n\t\t\tvar a, b, c, d, e, f, det, idet,\n\t\t\twidth = image.width - 1,\n\t\t\theight = image.height - 1;\n\n\t\t\tu0 *= width; v0 *= height;\n\t\t\tu1 *= width; v1 *= height;\n\t\t\tu2 *= width; v2 *= height;\n\n\t\t\tx1 -= x0; y1 -= y0;\n\t\t\tx2 -= x0; y2 -= y0;\n\n\t\t\tu1 -= u0; v1 -= v0;\n\t\t\tu2 -= u0; v2 -= v0;\n\n\t\t\tdet = u1 * v2 - u2 * v1;\n\n\t\t\tidet = 1 / det;\n\n\t\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\n\t\t\te = x0 - a * u0 - c * v0;\n\t\t\tf = y0 - b * u0 - d * v0;\n\n\t\t\t_context.save();\n\t\t\t_context.transform( a, b, c, d, e, f );\n\t\t\t_context.clip();\n\t\t\t_context.drawImage( image, 0, 0 );\n\t\t\t_context.restore();\n\n\t\t}\n\n\t\t// Hide anti-alias gaps\n\n\t\tfunction expand( v1, v2, pixels ) {\n\n\t\t\tvar x = v2.x - v1.x, y = v2.y - v1.y,\n\t\t\tdet = x * x + y * y, idet;\n\n\t\t\tif ( det === 0 ) return;\n\n\t\t\tidet = pixels / Math.sqrt( det );\n\n\t\t\tx *= idet; y *= idet;\n\n\t\t\tv2.x += x; v2.y += y;\n\t\t\tv1.x -= x; v1.y -= y;\n\n\t\t}\n\n\t\t// Context cached methods.\n\n\t\tfunction setOpacity( value ) {\n\n\t\t\tif ( _contextGlobalAlpha !== value ) {\n\n\t\t\t\t_context.globalAlpha = value;\n\t\t\t\t_contextGlobalAlpha = value;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setBlending( value ) {\n\n\t\t\tif ( _contextGlobalCompositeOperation !== value ) {\n\n\t\t\t\tif ( value === THREE.NormalBlending ) {\n\n\t\t\t\t\t_context.globalCompositeOperation = 'source-over';\n\n\t\t\t\t} else if ( value === THREE.AdditiveBlending ) {\n\n\t\t\t\t\t_context.globalCompositeOperation = 'lighter';\n\n\t\t\t\t} else if ( value === THREE.SubtractiveBlending ) {\n\n\t\t\t\t\t_context.globalCompositeOperation = 'darker';\n\n\t\t\t\t}\n\n\t\t\t\t_contextGlobalCompositeOperation = value;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setLineWidth( value ) {\n\n\t\t\tif ( _contextLineWidth !== value ) {\n\n\t\t\t\t_context.lineWidth = value;\n\t\t\t\t_contextLineWidth = value;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setLineCap( value ) {\n\n\t\t\t// \"butt\", \"round\", \"square\"\n\n\t\t\tif ( _contextLineCap !== value ) {\n\n\t\t\t\t_context.lineCap = value;\n\t\t\t\t_contextLineCap = value;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setLineJoin( value ) {\n\n\t\t\t// \"round\", \"bevel\", \"miter\"\n\n\t\t\tif ( _contextLineJoin !== value ) {\n\n\t\t\t\t_context.lineJoin = value;\n\t\t\t\t_contextLineJoin = value;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setStrokeStyle( value ) {\n\n\t\t\tif ( _contextStrokeStyle !== value ) {\n\n\t\t\t\t_context.strokeStyle = value;\n\t\t\t\t_contextStrokeStyle = value;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setFillStyle( value ) {\n\n\t\t\tif ( _contextFillStyle !== value ) {\n\n\t\t\t\t_context.fillStyle = value;\n\t\t\t\t_contextFillStyle = value;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setLineDash( value ) {\n\n\t\t\tif ( _contextLineDash.length !== value.length ) {\n\n\t\t\t\t_context.setLineDash( value );\n\t\t\t\t_contextLineDash = value;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n};"]},"metadata":{},"sourceType":"script"}